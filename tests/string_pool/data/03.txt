define
_POSIX_C_SOURCE
L
include
assert
h
include
errno
h
include
fcntl
h
include
stdarg
h
include
stdio
h
include
stdlib
h
include
string
h
include
sys
tat
h
include
sys
ypes
h
include
unistd
h
ifdef
CPP_PROFILE
define
NOINLINE
__attribute__
noinline
else
define
NOINLINE
endif
typedef
struct
_allocator_block
struct
_allocator_block
next
unsigned
int
used
void
data
allocator_block_t
typedef
struct
allocator_block_t
head
allocator_block_t
tail
allocator_block_t
curr
unsigned
int
block_capacity
unsigned
int
data_size
allocator_t
static
allocator_block_t
block_new
size_t
capacity
size_t
size
allocator_block_t
block
block
calloc
sizeof
allocator_block_t
assert
block
NULL
block
used
block
data
calloc
capacity
size
assert
block
data
NULL
return
block
void
allocator_setup
allocator_t
alloc
size_t
capacity
size_t
size
allocator_block_t
block
block
block_new
capacity
size
alloc
data_size
unsigned
int
size
alloc
block_capacity
unsigned
int
capacity
alloc
head
alloc
tail
alloc
curr
block
void
allocator_cleanup
allocator_t
alloc
allocator_block_t
head
next
head
alloc
head
while
head
NULL
next
head
next
free
head
data
free
head
head
next
alloc
data_size
alloc
block_capacity
alloc
head
alloc
tail
alloc
curr
NULL
void
allocator_reset
allocator_t
alloc
allocator_block_t
head
next
head
alloc
head
while
head
NULL
next
head
next
if
head
used
memset
head
data
head
used
alloc
data_size
head
used
head
next
alloc
curr
alloc
head
void
allocator_allocate
allocator_t
alloc
void
ptr
allocator_block_t
curr
nblk
curr
alloc
curr
if
curr
used
alloc
block_capacity
if
curr
next
NULL
alloc
curr
curr
next
curr
curr
next
else
nblk
block_new
alloc
block_capacity
alloc
data_size
nblk
next
NULL
curr
next
nblk
alloc
tail
nblk
alloc
curr
nblk
curr
nblk
ptr
unsigned
char
curr
data
curr
used
alloc
data_size
curr
used
return
ptr
define
U_
x01
define
L_
x02
define
D_
x04
define
S_
x08
define
P_
x10
define
X_
x20
define
C_
x40
define
B_
x80
define
CS_
C_
S_
define
CSB_
C_
S_
B_
define
LX_
L_
X_
define
SB_
S_
B_
define
UX_
U_
X_
static
const
unsigned
char
__ctype_lut
C_
C_
C_
C_
C_
C_
C_
C_
C_
CSB_
CS_
CS_
CS_
CS_
C_
C_
C_
C_
C_
C_
C_
C_
C_
C_
C_
C_
C_
C_
C_
C_
C_
C_
SB_
P_
P_
P_
P_
P_
P_
P_
P_
P_
P_
P_
P_
P_
P_
P_
D_
D_
D_
D_
D_
D_
D_
D_
D_
D_
P_
P_
P_
P_
P_
P_
P_
UX_
UX_
UX_
UX_
UX_
UX_
U_
U_
U_
U_
U_
U_
U_
U_
U_
U_
U_
U_
U_
U_
U_
U_
U_
U_
U_
U_
P_
P_
P_
P_
P_
P_
LX_
LX_
LX_
LX_
LX_
LX_
L_
L_
L_
L_
L_
L_
L_
L_
L_
L_
L_
L_
L_
L_
L_
L_
L_
L_
L_
L_
P_
P_
P_
P_
C_
static
inline
int
isalnum
int
x
return
__ctype_lut
unsigned
char
x
U_
L_
D_
static
inline
int
isalpha
int
x
return
__ctype_lut
unsigned
char
x
U_
L_
static
inline
int
isdigit
int
x
return
__ctype_lut
unsigned
char
x
D_
static
inline
int
isupper
int
x
return
__ctype_lut
unsigned
char
x
U_
static
inline
int
isxdigit
int
x
return
__ctype_lut
unsigned
char
x
D_
X_
static
inline
int
tolower
int
x
return
isupper
x
x
x20
x
typedef
struct
unsigned
int
offset
unsigned
int
length
unsigned
int
linenol
cpp_line_t
typedef
struct
char
filepath
char
filedata
cpp_line_t
lines
unsigned
int
nr_line
unsigned
int
filesize
cpp_file_t
define
haszero
v
v
x0101010101010101LU
v
x8080808080808080LU
static
NOINLINE
unsigned
int
count_newline
char
data
unsigned
int
sz
unsigned
int
n
const
char
p
e
const
unsigned
long
nls
x0a0a0a0a0a0a0a0aLU
p
data
e
p
sz
n
while
p
e
unsigned
long
v
memcpy
v
p
if
haszero
v
nls
n
p
n
n
p
n
n
p
n
n
p
n
n
p
n
n
p
n
n
p
n
n
p
n
p
while
p
e
n
p
n
return
n
static
NOINLINE
cpp_line_t
split_lines
char
data
unsigned
int
nr_line
cpp_line_t
lines
unsigned
int
p
q
r
unsigned
int
n
len
linenol
lines
calloc
nr_line
sizeof
lines
if
lines
NULL
return
NULL
len
n
linenol
p
q
r
while
data
p
if
data
p
n
data
q
data
p
len
else
if
p
data
p
lines
n
linenol
linenol
data
q
data
p
len
else
lines
n
linenol
linenol
data
q
data
p
lines
n
offset
r
lines
n
length
len
len
r
q
n
len
data
q
lines
n
offset
q
lines
n
linenol
linenol
lines
n
length
return
lines
static
unsigned
int
get_file_size
int
fd
off_t
size
struct
stat
sb
assert
fstat
fd
sb
assert
S_ISREG
sb
st_mode
size
sb
st_size
return
size
size
unsigned
int
unsigned
int
size
cpp_file_t
cpp_file_read
const
char
path
int
fd
char
data
char
filepath
unsigned
int
size
unsigned
int
nr_line
unsigned
int
last_idx
unsigned
int
pathlen
cpp_file_t
file
cpp_line_t
lines
fd
open
path
O_RDONLY
if
fd
return
NULL
size
get_file_size
fd
if
size
close
fd
return
NULL
pathlen
strlen
path
file
calloc
sizeof
file
pathlen
size
if
file
NULL
close
fd
return
NULL
filepath
char
file
sizeof
file
memcpy
filepath
path
pathlen
data
filepath
pathlen
last_idx
size
read
fd
data
size
if
data
size
n
data
size
n
last_idx
size
if
data
last_idx
data
last_idx
n
data
last_idx
nr_line
count_newline
data
size
lines
split_lines
data
nr_line
if
lines
NULL
free
file
close
fd
return
NULL
file
filepath
filepath
file
filedata
data
file
filesize
size
file
lines
lines
file
nr_line
nr_line
close
fd
return
file
const
char
cpp_file_linedata
cpp_file_t
f
cpp_line_t
line
return
f
filedata
line
offset
void
cpp_file_close
cpp_file_t
f
if
f
NULL
free
f
lines
free
f
typedef
unsigned
int
token_char_t
typedef
enum
TK_hash_hash
TK_number
TK_integer_const
TK_float_const
TK_char_const
TK_string
TK_identifier
TK_elipsis
TK_lshift
TK_rshift
TK_incr
TK_decr
TK_arrow
TK_and
TK_or
TK_eq
TK_ne
TK_le
TK_ge
TK_asg_add
TK_asg_sub
TK_asg_mul
TK_asg_div
TK_asg_mod
TK_asg_lshift
TK_asg_rshift
TK_asg_band
TK_asg_bxor
TK_asg_bor
TK_continue
TK_register
TK_unsigned
TK_volatile
TK_default
TK_typedef
TK_double
TK_extern
TK_return
TK_signed
TK_sizeof
TK_static
TK_struct
TK_switch
TK_break
TK_const
TK_float
TK_short
TK_union
TK_while
TK_auto
TK_case
TK_char
TK_else
TK_enum
TK_goto
TK_long
TK_void
TK_for
TK_int
TK_do
TK_if
TK_eof
token_kind_t
typedef
struct
token_kind_t
kind
unsigned
char
space
unsigned
char
at_bol
unsigned
char
at_bof
unsigned
int
unsigned
int
lineno
unsigned
int
length
const
char
ptr
cpp_token_t
typedef
struct
cpp_file_t
file
cpp_line_t
line
const
char
filepath
const
char
tokptr
const
char
inptr
const
char
endptr
token_char_t
ch
unsigned
int
lineno
cpp_context_t
static
cpp_context_t
g_context
static
const
int
g_max_context
static
int
g_top
static
void
cpp_lex_error
cpp_context_t
ctx
const
char
fmt
va_list
ap
va_start
ap
fmt
fprintf
stderr
ctx
filepath
ctx
lineno
vfprintf
stderr
fmt
ap
fputc
n
stderr
cpp_file_close
ctx
file
va_end
ap
exit
static
NOINLINE
void
cpp_lex_nextline
cpp_context_t
ctx
ctx
line
ctx
file
lines
ctx
lineno
ctx
lineno
ctx
inptr
cpp_file_linedata
ctx
file
ctx
line
ctx
endptr
ctx
inptr
ctx
line
length
static
int
cpp_lex_peekn
cpp_context_t
ctx
int
n
const
char
ptr
cpp_line_t
line
ptr
ctx
inptr
n
if
ptr
ctx
endptr
if
ctx
endptr
n
return
n
line
ctx
file
lines
ctx
lineno
ptr
cpp_file_linedata
ctx
file
line
return
ptr
static
int
cpp_lex_peek
cpp_context_t
ctx
return
cpp_lex_peekn
ctx
static
NOINLINE
void
cpp_lex_next
cpp_context_t
ctx
ctx
tokptr
ctx
inptr
if
ctx
inptr
ctx
endptr
ctx
endptr
n
cpp_lex_nextline
ctx
else
if
ctx
inptr
ctx
ch
return
ctx
ch
ctx
inptr
ctx
inptr
static
void
cpp_lex_skip
cpp_context_t
ctx
int
n
while
n
cpp_lex_next
ctx
n
static
void
cpp_lex_skipline
cpp_context_t
ctx
cpp_token_t
tok
const
char
data
cpp_line_t
line
ctx
line
unsigned
int
linenol
line
linenol
cpp_lex_nextline
ctx
line
ctx
line
if
linenol
line
linenol
do
cpp_lex_nextline
ctx
line
ctx
line
data
cpp_file_linedata
ctx
file
line
while
data
linenol
line
linenol
tok
at_bol
tok
space
cpp_lex_next
ctx
static
void
cpp_lex_newline
cpp_context_t
ctx
cpp_token_t
tok
cpp_lex_nextline
ctx
tok
at_bol
tok
space
cpp_lex_next
ctx
static
NOINLINE
void
cpp_lex_comment
cpp_context_t
ctx
cpp_token_t
tok
token_char_t
kind
cpp_lex_skip
ctx
if
kind
cpp_lex_skipline
ctx
tok
return
else
do
if
ctx
ch
n
cpp_lex_newline
ctx
tok
else
if
ctx
ch
cpp_lex_peek
ctx
tok
space
cpp_lex_skip
ctx
return
else
if
ctx
ch
cpp_lex_peek
ctx
cpp_lex_error
ctx
return
else
cpp_lex_next
ctx
while
ctx
ch
ctx
lineno
ctx
lineno
ctx
lineno
ctx
lineno
cpp_lex_error
ctx
static
int
isodigit
int
ch
return
unsigned
int
ch
static
void
cpp_lex_string
cpp_context_t
ctx
cpp_token_t
tok
token_char_t
quote
cpp_lex_next
ctx
while
ctx
ch
if
ctx
ch
quote
tok
length
cpp_lex_next
ctx
break
else
if
ctx
ch
tok
length
cpp_lex_next
ctx
if
isodigit
ctx
ch
tok
length
cpp_lex_next
ctx
if
isodigit
ctx
ch
tok
length
cpp_lex_next
ctx
if
isodigit
ctx
ch
tok
length
cpp_lex_next
ctx
else
if
ctx
ch
x
tok
length
cpp_lex_next
ctx
while
isxdigit
ctx
ch
tok
length
cpp_lex_next
ctx
else
if
strchr
ctx
ch
tok
length
cpp_lex_next
ctx
else
if
ctx
ch
n
cpp_lex_error
ctx
quote
return
else
tok
length
cpp_lex_next
ctx
static
void
cpp_lex_internal
cpp_context_t
ctx
cpp_token_t
tok
token_char_t
peek
again
tok
lineno
ctx
lineno
tok
ptr
ctx
tokptr
tok
length
tok
kind
ctx
ch
peek
cpp_lex_peek
ctx
if
isalpha
ctx
ch
ctx
ch
_
do
tok
length
cpp_lex_next
ctx
while
isalnum
ctx
ch
ctx
ch
_
tok
length
tok
kind
TK_identifier
return
else
if
ctx
ch
peek
peek
cpp_lex_comment
ctx
tok
peek
goto
again
else
if
ctx
ch
ctx
ch
TK_string
TK_char_const
return
else
if
isdigit
ctx
ch
ctx
ch
isdigit
peek
do
tok
length
cpp_lex_next
ctx
if
tolower
ctx
ch
e
tolower
ctx
ch
p
tok
length
cpp_lex_next
ctx
if
ctx
ch
ctx
ch
if
isdigit
cpp_lex_peek
ctx
tok
length
cpp_lex_skip
ctx
else
break
while
isalnum
ctx
ch
ctx
ch
tok
length
tok
kind
TK_number
return
switch
ctx
ch
case
tok
kind
TK_eof
tok
length
tok
lineno
ctx
lineno
break
case
n
cpp_lex_newline
ctx
tok
return
case
t
tok
space
case
case
r
case
f
case
v
tok
space
cpp_lex_next
ctx
goto
again
case
if
peek
cpp_lex_peekn
ctx
tok
kind
TK_elipsis
tok
length
cpp_lex_skip
ctx
break
case
if
peek
tok
kind
TK_hash_hash
tok
length
cpp_lex_next
ctx
break
case
if
peek
tok
kind
TK_asg_mul
tok
length
cpp_lex_next
ctx
break
case
if
peek
tok
kind
TK_asg_div
tok
length
cpp_lex_next
ctx
break
case
if
peek
tok
kind
TK_asg_mod
tok
length
cpp_lex_next
ctx
break
case
if
peek
tok
kind
TK_eq
tok
length
cpp_lex_next
ctx
break
case
if
peek
tok
kind
TK_ne
tok
length
cpp_lex_next
ctx
break
case
if
peek
tok
kind
TK_asg_bxor
tok
length
cpp_lex_next
ctx
break
case
switch
peek
case
tok
kind
TK_incr
tok
length
cpp_lex_next
ctx
break
case
tok
kind
TK_asg_add
tok
length
cpp_lex_next
ctx
break
break
case
switch
peek
case
tok
kind
TK_and
tok
length
cpp_lex_next
ctx
break
case
tok
kind
TK_asg_band
tok
length
cpp_lex_next
ctx
break
break
case
switch
peek
case
tok
kind
TK_or
tok
length
cpp_lex_next
ctx
break
case
tok
kind
TK_asg_bor
tok
length
cpp_lex_next
ctx
break
break
case
switch
peek
case
tok
kind
TK_decr
tok
length
cpp_lex_next
ctx
break
case
tok
kind
TK_arrow
tok
length
cpp_lex_next
ctx
break
case
tok
kind
TK_asg_sub
tok
length
cpp_lex_next
ctx
break
break
case
if
peek
peek
cpp_lex_peekn
ctx
if
peek
tok
kind
TK_asg_lshift
tok
length
cpp_lex_next
ctx
else
tok
kind
TK_lshift
tok
length
cpp_lex_next
ctx
else
if
peek
tok
kind
TK_le
tok
length
cpp_lex_next
ctx
break
case
if
peek
peek
cpp_lex_peekn
ctx
if
peek
tok
kind
TK_asg_rshift
tok
length
cpp_lex_next
ctx
else
tok
kind
TK_rshift
tok
length
cpp_lex_next
ctx
else
if
peek
tok
kind
TK_ge
tok
length
cpp_lex_next
ctx
break
default
break
cpp_lex_next
ctx
static
void
cpp_context_setup
cpp_context_t
ctx
cpp_file_t
file
ctx
file
file
ctx
line
file
lines
ctx
filepath
file
filepath
ctx
inptr
cpp_file_linedata
file
ctx
line
ctx
endptr
ctx
inptr
ctx
line
length
ctx
lineno
cpp_lex_next
ctx
typedef
struct
token_t
struct
token_t
next
cpp_token_t
t
token_t
typedef
struct
token_t
head
token_t
tail
token_list_t
typedef
struct
const
char
mainfile
cpp_context_t
ctx
token_list_t
toklist
token_list_t
pending
allocator_t
a_token
cpp_t
void
cpp_push_context
cpp_t
cpp
cpp_file_t
file
void
cpp_setup
cpp_t
cpp
const
char
mainfile
cpp_file_t
file
file
cpp_file_read
mainfile
if
file
NULL
fprintf
stderr
mainfile
exit
memset
cpp
toklist
sizeof
token_list_t
memset
cpp
pending
sizeof
token_list_t
allocator_setup
cpp
a_token
sizeof
token_t
cpp
mainfile
mainfile
cpp_push_context
cpp
file
void
cpp_cleanup
cpp_t
cpp
allocator_cleanup
cpp
a_token
memset
cpp
sizeof
cpp_t
void
cpp_error
cpp_t
cpp
cpp_token_t
tok
const
char
fmt
va_list
ap
cpp_context_t
ctx
va_start
ap
fmt
ctx
cpp
ctx
if
tok
NULL
fprintf
stderr
ctx
filepath
tok
lineno
else
fprintf
stderr
cpp
mainfile
fputs
stderr
vfprintf
stderr
fmt
ap
fputc
n
stderr
cpp_cleanup
cpp
va_end
ap
exit
void
cpp_push_context
cpp_t
cpp
cpp_file_t
file
cpp_context_t
ctx
if
g_top
g_max_context
cpp_error
cpp
NULL
ctx
g_context
g_top
cpp_context_setup
ctx
file
cpp
ctx
ctx
void
cpp_pop_context
cpp_t
cpp
if
g_top
cpp
ctx
NULL
g_top
return
cpp
ctx
g_context
g_top
void
cpp_lex
cpp_t
cpp
cpp_token_t
tok
if
cpp
pending
head
NULL
cpp_lex_internal
cpp
ctx
tok
else
tok
cpp
pending
head
t
cpp
pending
head
cpp
pending
head
next
void
cpp_skipline
cpp_t
cpp
cpp_token_t
tok
if
tok
kind
n
cpp_lex_skipline
cpp
ctx
tok
cpp_lex_internal
cpp
ctx
tok
else
cpp_lex_internal
cpp
ctx
tok
static
void
append_token
cpp_t
cpp
token_list_t
list
cpp_token_t
tok
token_t
token
token
allocator_allocate
cpp
a_token
token
next
NULL
memcpy
token
t
tok
sizeof
cpp_token_t
if
list
head
NULL
list
head
token
else
list
tail
next
token
list
tail
token
tok
at_bol
tok
at_bof
tok
space
void
cpp_append_token
cpp_t
cpp
cpp_token_t
tok
append_token
cpp
cpp
toklist
tok
define
CPP_IF
x6669UL
define
CPP_IFDEF
x6665646669UL
define
CPP_IFNDEF
x6665646e6669UL
define
CPP_ELIF
x66696c65UL
define
CPP_ELSE
x65736c65UL
define
CPP_ENDIF
x6669646e65UL
define
CPP_DEFINE
x656e69666564UL
define
CPP_UNDEF
x6665646e75UL
define
CPP_LINE
x656e696cUL
define
CPP_PRAGMA
x616d67617270UL
define
CPP_INCLUDE
x6564756c636e69UL
define
CPP_ERROR
x726f727265UL
define
CPP_WARN
x6e726177UL
define
CPP_WARNING
x676e696e726177UL
void
cpp_directive
cpp_t
cpp
cpp_token_t
tok
static
void
cpp_directive_skip
cpp_t
cpp
cpp_token_t
tok
cpp_skipline
cpp
tok
typedef
enum
STATE_DEAD
STATE_IN_IF
STATE_IN_ELIF
STATE_IN_ELSE
cond_state_kind_t
typedef
struct
cond_state_kind_t
kind
unsigned
char
has_elsif
unsigned
char
cond_state_t
static
cond_state_t
g_cond_state
static
const
int
g_max_state
static
int
g_state
static
void
push_cond_state
cpp_t
cpp
cpp_token_t
tok
if
g_state
g_max_state
cpp_error
cpp
tok
g_state
static
void
pop_cond_state
cpp_t
cpp
cpp_token_t
tok
if
g_state
cpp_error
cpp
tok
g_state
static
cond_state_t
peek_cond_state
cpp_t
cpp
cpp_token_t
tok
void
cpp
void
tok
return
g_state
g_cond_state
g_state
NULL
static
void
skip_dead_block
cpp_t
cpp
cpp_token_t
tok
int
level
unsigned
long
v
while
tok
kind
TK_eof
if
tok
at_bol
tok
kind
cpp_lex
cpp
tok
if
tok
length
tok
kind
n
cpp_skipline
cpp
tok
continue
v
memcpy
v
tok
ptr
tok
length
if
level
v
CPP_ELIF
v
CPP_ELSE
v
CPP_ENDIF
cpp_directive
cpp
tok
return
else
if
v
CPP_IF
v
CPP_IFDEF
v
CPP_IFNDEF
level
else
if
v
CPP_ENDIF
level
cpp_skipline
cpp
tok
static
long
cpp_convert_integer
cpp_t
cpp
cpp_token_t
tok
long
result
const
char
p
char
buf
end
int
base
have_suffix
if
tok
length
sizeof
buf
cpp_error
cpp
tok
memcpy
buf
tok
ptr
tok
length
buf
tok
length
base
p
buf
if
p
p
if
tolower
p
x
if
isxdigit
p
cpp_error
cpp
tok
base
else
if
isodigit
p
base
else
if
isdigit
p
cpp_error
cpp
tok
end
NULL
have_suffix
result
strtol
buf
end
base
if
end
NULL
end
p
end
have_suffix
if
tolower
p
l
p
if
p
p
p
if
tolower
p
u
p
else
if
tolower
p
u
p
if
tolower
p
l
p
if
p
p
p
else
if
p
tolower
p
e
cpp_error
cpp
tok
else
if
errno
ERANGE
cpp_error
cpp
tok
if
have_suffix
p
cpp_error
cpp
tok
end
cpp_lex
cpp
tok
return
result
static
const
unsigned
char
conv_table
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x01
x02
x03
x04
x05
x06
x07
x08
x09
x00
x00
x00
x00
x00
x00
x00
x0A
x0B
x0C
x0D
x0E
x0F
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x00
x0A
x0B
x0C
x0D
x0E
x0F
x00
static
int
cpp_convert_char
cpp_t
cpp
cpp_token_t
tok
int
result
const
char
p
tok
ptr
enum
ESC_NONE
ESC_SIMPLE
ESC_HEX
ESC_OCTAL
kind
ESC_NONE
p
if
p
cpp_error
cpp
tok
else
if
p
p
if
isodigit
p
do
result
result
conv_table
unsigned
char
p
while
isodigit
p
kind
ESC_OCTAL
else
if
tolower
p
x
p
if
isxdigit
p
cpp_error
cpp
tok
do
result
result
conv_table
unsigned
char
p
while
isxdigit
p
kind
ESC_HEX
else
switch
p
case
a
result
x07
break
case
b
result
x08
break
case
t
result
x09
break
case
n
result
x0A
break
case
v
result
x0B
break
case
f
result
x0C
break
case
r
result
x0D
break
default
cpp_error
cpp
tok
int
tok
length
tok
ptr
break
kind
ESC_SIMPLE
else
result
unsigned
char
p
if
p
cpp_error
cpp
tok
else
if
result
result
switch
kind
case
ESC_NONE
cpp_error
cpp
tok
break
case
ESC_OCTAL
cpp_error
cpp
tok
break
case
ESC_HEX
cpp_error
cpp
tok
break
default
break
cpp_lex
cpp
tok
return
result
static
int
expr_priority
cpp_token_t
tok
switch
tok
kind
case
case
case
return
case
case
return
case
TK_lshift
case
TK_rshift
return
case
case
case
TK_le
case
TK_ge
return
case
TK_eq
case
TK_ne
return
case
return
case
return
case
return
case
TK_and
return
case
TK_or
return
case
return
default
return
case
case
case
TK_arrow
case
TK_incr
case
TK_decr
case
case
TK_asg_mul
case
TK_asg_div
case
TK_asg_mod
case
TK_asg_add
case
TK_asg_sub
case
TK_asg_lshift
case
TK_asg_rshift
case
TK_asg_band
case
TK_asg_bxor
case
TK_asg_bor
case
return
static
long
cpp_constexpr
cpp_t
cpp
cpp_token_t
tok
int
prio
int
tokprio
token_kind_t
op
long
lhs
rhs
vif
again
switch
tok
kind
case
cpp_lex
cpp
tok
lhs
cpp_constexpr
cpp
tok
if
tok
kind
cpp_error
cpp
tok
cpp_lex
cpp
tok
break
case
cpp_lex
cpp
tok
lhs
cpp_constexpr
cpp
tok
break
case
cpp_lex
cpp
tok
lhs
cpp_constexpr
cpp
tok
break
case
cpp_lex
cpp
tok
lhs
cpp_constexpr
cpp
tok
break
case
cpp_lex
cpp
tok
goto
again
case
TK_number
lhs
cpp_convert_integer
cpp
tok
break
case
TK_char_const
lhs
cpp_convert_char
cpp
tok
break
case
TK_identifier
lhs
if
tok
length
memcmp
tok
ptr
int
paren
cpp_lex
cpp
tok
if
tok
kind
cpp_lex
cpp
tok
paren
if
tok
kind
TK_identifier
cpp_error
cpp
tok
cpp_lex
cpp
tok
if
paren
if
tok
kind
cpp_error
cpp
tok
cpp_lex
cpp
tok
else
cpp_lex
cpp
tok
break
case
TK_string
cpp_error
cpp
tok
break
case
n
case
TK_eof
cpp_error
cpp
tok
break
default
cpp_error
cpp
tok
int
tok
length
tok
ptr
cpp_cleanup
cpp
exit
break
while
tok
kind
TK_eof
tok
kind
n
tokprio
expr_priority
tok
if
tokprio
cpp_error
cpp
tok
int
tok
length
tok
ptr
else
if
tokprio
prio
tokprio
break
op
tok
kind
if
op
cpp_lex
cpp
tok
rhs
cpp_constexpr
cpp
tok
if
tok
kind
cpp_error
cpp
tok
cpp_lex
cpp
tok
vif
cpp_constexpr
cpp
tok
lhs
lhs
rhs
vif
continue
else
cpp_lex
cpp
tok
rhs
cpp_constexpr
cpp
tok
tokprio
switch
op
case
if
rhs
cpp_error
cpp
tok
lhs
rhs
break
case
if
rhs
cpp_error
cpp
tok
lhs
rhs
break
case
lhs
rhs
break
case
lhs
rhs
break
case
lhs
rhs
break
case
lhs
rhs
break
case
lhs
rhs
break
case
lhs
rhs
break
case
lhs
lhs
rhs
break
case
lhs
lhs
rhs
break
case
TK_le
lhs
lhs
rhs
break
case
TK_ge
lhs
lhs
rhs
break
case
TK_eq
lhs
lhs
rhs
break
case
TK_ne
lhs
lhs
rhs
break
case
TK_or
lhs
lhs
rhs
break
case
TK_and
lhs
lhs
rhs
break
default
cpp_error
cpp
NULL
break
return
lhs
static
long
eval_constexpr
cpp_t
cpp
cpp_token_t
tok
long
cond
cpp_lex
cpp
tok
if
tok
kind
TK_eof
tok
kind
n
cpp_error
cpp
tok
cond
cpp_constexpr
cpp
tok
if
tok
kind
n
cpp_error
cpp
tok
cpp_lex
cpp
tok
return
cond
static
void
cpp_directive_if
cpp_t
cpp
cpp_token_t
tok
long
cond
cond_state_t
state
cond
eval_constexpr
cpp
tok
state
peek_cond_state
cpp
tok
if
cond
state
kind
STATE_DEAD
skip_dead_block
cpp
tok
else
state
kind
STATE_IN_IF
static
void
cpp_directive_ifdef
cpp_t
cpp
cpp_token_t
tok
cond_state_t
state
cpp_lex
cpp
tok
if
tok
kind
TK_identifier
cpp_error
cpp
tok
cpp_lex
cpp
tok
if
tok
kind
n
cpp_error
cpp
tok
cpp_lex
cpp
tok
state
peek_cond_state
cpp
tok
state
kind
STATE_IN_IF
skip_dead_block
cpp
tok
static
void
cpp_directive_elif
cpp_t
cpp
cpp_token_t
tok
long
cond
cond_state_t
state
state
peek_cond_state
cpp
tok
if
state
NULL
cpp_error
cpp
tok
switch
state
kind
case
STATE_IN_ELSE
cpp_error
cpp
tok
return
case
STATE_IN_IF
case
STATE_IN_ELIF
skip_dead_block
cpp
tok
return
default
state
has_elsif
break
cond
eval_constexpr
cpp
tok
if
cond
state
kind
STATE_DEAD
skip_dead_block
cpp
tok
else
state
kind
STATE_IN_ELIF
static
void
cpp_directive_else
cpp_t
cpp
cpp_token_t
tok
cond_state_t
state
state
peek_cond_state
cpp
tok
if
state
NULL
cpp_error
cpp
tok
switch
state
kind
case
STATE_IN_ELSE
cpp_error
cpp
tok
break
case
STATE_IN_IF
case
STATE_IN_ELIF
skip_dead_block
cpp
tok
return
default
state
has_elsif
break
state
kind
STATE_IN_ELSE
cpp_directive_skip
cpp
tok
static
const
char
include_paths
NULL
static
cpp_file_t
cpp_include_getfile
cpp_t
cpp
cpp_token_t
tok
int
len
cpp_file_t
file
char
pathbuf
const
char
ptr
path
cpp_context_t
ctx
cpp
ctx
if
tok
kind
TK_string
ptr
tok
ptr
len
int
tok
length
snprintf
pathbuf
sizeof
pathbuf
len
ptr
file
cpp_file_read
pathbuf
if
file
NULL
return
file
else
if
tok
kind
cpp_lex_string
ctx
tok
ptr
tok
ptr
len
int
tok
length
else
cpp_error
cpp
tok
path
include_paths
while
path
NULL
snprintf
pathbuf
sizeof
pathbuf
path
len
ptr
file
cpp_file_read
pathbuf
if
file
NULL
return
file
path
cpp_error
cpp
tok
len
ptr
return
NULL
static
void
cpp_directive_include
cpp_t
cpp
cpp_token_t
tok
cpp_file_t
file
cpp_lex
cpp
tok
file
cpp_include_getfile
cpp
tok
cpp_lex
cpp
tok
if
tok
kind
n
cpp_error
cpp
tok
if
file
NULL
cpp_push_context
cpp
file
tok
at_bol
tok
at_bof
tok
space
static
void
cpp_directive_warn
cpp_t
cpp
cpp_token_t
tok
cpp_line_t
line
cpp_context_t
ctx
unsigned
int
len
lineno
const
char
warnmsg
linedata
ctx
cpp
ctx
line
ctx
line
lineno
ctx
lineno
warnmsg
cpp_file_linedata
ctx
file
line
linedata
warnmsg
len
line
length
while
linedata
n
line
ctx
file
lines
lineno
linedata
cpp_file_linedata
ctx
file
line
lineno
len
line
length
fprintf
stderr
ctx
filepath
tok
lineno
fprintf
stderr
int
len
warnmsg
cpp_skipline
cpp
tok
static
void
cpp_directive_error
cpp_t
cpp
cpp_token_t
tok
cpp_line_t
line
cpp_context_t
ctx
unsigned
int
lineno
len
const
char
errmsg
linedata
ctx
cpp
ctx
line
ctx
line
lineno
ctx
lineno
errmsg
cpp_file_linedata
ctx
file
line
linedata
errmsg
len
line
length
while
linedata
n
line
ctx
file
lines
lineno
linedata
cpp_file_linedata
ctx
file
line
lineno
len
line
length
fprintf
stderr
ctx
filepath
tok
lineno
fprintf
stderr
int
len
errmsg
cpp_cleanup
cpp
exit
void
cpp_directive
cpp_t
cpp
cpp_token_t
tok
const
char
name
tok
ptr
unsigned
int
len
tok
length
if
len
unsigned
long
v
memcpy
v
name
len
switch
v
case
CPP_IF
push_cond_state
cpp
tok
cpp_directive_if
cpp
tok
return
case
CPP_ELIF
cpp_directive_elif
cpp
tok
return
case
CPP_IFDEF
case
CPP_IFNDEF
push_cond_state
cpp
tok
cpp_directive_ifdef
cpp
tok
return
case
CPP_ELSE
cpp_directive_else
cpp
tok
return
case
CPP_ENDIF
pop_cond_state
cpp
tok
cpp_directive_skip
cpp
tok
return
case
CPP_LINE
case
CPP_DEFINE
case
CPP_UNDEF
case
CPP_PRAGMA
cpp_directive_skip
cpp
tok
return
case
CPP_INCLUDE
cpp_directive_include
cpp
tok
return
case
CPP_ERROR
cpp_directive_error
cpp
tok
return
case
CPP_WARN
case
CPP_WARNING
cpp_directive_warn
cpp
tok
return
default
break
cpp_error
cpp
tok
int
len
name
void
bench
cpp_t
cpp
cpp_token_t
tok
memset
tok
sizeof
tok
while
cpp
ctx
NULL
cpp_lex
cpp
tok
while
tok
kind
TK_eof
cpp_lex
cpp
tok
cpp_pop_context
cpp
void
preprocessor
cpp_t
cpp
cpp_token_t
tok
memset
tok
sizeof
tok
tok
at_bol
tok
at_bof
tok
space
while
cpp
ctx
NULL
cpp_lex
cpp
tok
while
tok
kind
TK_eof
if
tok
kind
n
cpp_lex
cpp
tok
continue
else
if
tok
at_bol
tok
kind
cpp_lex
cpp
tok
if
tok
kind
n
cpp_lex
cpp
tok
else
if
tok
kind
TK_identifier
cpp_error
cpp
tok
else
tok
at_bol
cpp_directive
cpp
tok
continue
cpp_append_token
cpp
tok
cpp_lex
cpp
tok
cpp_pop_context
cpp
cpp_append_token
cpp
tok
void
cpp_print
cpp_t
cpp
FILE
fp
token_t
head
cpp
toklist
head
unsigned
int
space
lineno_delta
lineno
while
head
NULL
token_t
next
head
next
cpp_token_t
tok
head
t
space
if
tok
kind
TK_eof
if
tok
at_bol
if
tok
at_bof
fprintf
fp
tok
lineno
else
lineno_delta
tok
lineno
lineno
if
lineno_delta
for
space
space
lineno_delta
space
fprintf
fp
else
fprintf
fp
tok
lineno
lineno
tok
lineno
space
for
space
tok
space
space
fprintf
fp
fprintf
fp
int
tok
length
tok
ptr
head
next
if
lineno
fprintf
fp
void
cpp_count_tokenof
cpp_t
cpp
token_kind_t
what
size_t
count
cpp_token_t
tok
token_t
head
next
head
cpp
toklist
head
while
head
next
head
next
tok
head
t
count
tok
kind
what
head
next
printf
count
int
main
int
argc
char
argv
cpp_t
cpp
if
argc
return
memset
cpp
sizeof
cpp
cpp_setup
cpp
argv
ifdef
CPP_BENCH
bench
cpp
else
preprocessor
cpp
ifdef
CPP_DBG
cpp_print
cpp
stdout
endif
endif
cpp_cleanup
cpp
