include
typedef
struct
Obj
var
Type
type_def
Type
enum_ty
int
enum_val
VarScope
typedef
struct
Scope
Scope
struct
Scope
Scope
next
HashMap
vars
HashMap
tags
typedef
struct
bool
is_typedef
bool
is_static
bool
is_extern
bool
is_inline
bool
is_tls
int
align
VarAttr
typedef
struct
Initializer
Initializer
struct
Initializer
Initializer
next
Type
ty
Token
tok
bool
is_flexible
Node
expr
Initializer
children
Member
mem
typedef
struct
InitDesg
InitDesg
struct
InitDesg
InitDesg
next
int
idx
Member
member
Obj
var
static
Obj
locals
static
Obj
globals
static
Scope
scope
Scope
static
Obj
current_fn
static
Node
gotos
static
Node
labels
static
char
brk_label
static
char
cont_label
static
Node
current_switch
static
Obj
builtin_alloca
static
bool
is_typename
Token
tok
static
Type
declspec
Token
rest
Token
tok
VarAttr
attr
static
Type
typename
Token
rest
Token
tok
static
Type
enum_specifier
Token
rest
Token
tok
static
Type
typeof_specifier
Token
rest
Token
tok
static
Type
type_suffix
Token
rest
Token
tok
Type
ty
static
Type
declarator
Token
rest
Token
tok
Type
ty
static
Node
declaration
Token
rest
Token
tok
Type
basety
VarAttr
attr
static
void
array_initializer2
Token
rest
Token
tok
Initializer
init
int
i
static
void
struct_initializer2
Token
rest
Token
tok
Initializer
init
Member
mem
static
void
initializer2
Token
rest
Token
tok
Initializer
init
static
Initializer
initializer
Token
rest
Token
tok
Type
ty
Type
new_ty
static
Node
lvar_initializer
Token
rest
Token
tok
Obj
var
static
void
gvar_initializer
Token
rest
Token
tok
Obj
var
static
Node
compound_stmt
Token
rest
Token
tok
static
Node
stmt
Token
rest
Token
tok
static
Node
expr_stmt
Token
rest
Token
tok
static
Node
expr
Token
rest
Token
tok
static
int64_t
eval
Node
node
static
int64_t
eval2
Node
node
char
label
static
int64_t
eval_rval
Node
node
char
label
static
bool
is_const_expr
Node
node
static
Node
assign
Token
rest
Token
tok
static
Node
logor
Token
rest
Token
tok
static
double
eval_double
Node
node
static
Node
conditional
Token
rest
Token
tok
static
Node
logand
Token
rest
Token
tok
static
Node
bitor
Token
rest
Token
tok
static
Node
bitxor
Token
rest
Token
tok
static
Node
bitand
Token
rest
Token
tok
static
Node
equality
Token
rest
Token
tok
static
Node
relational
Token
rest
Token
tok
static
Node
shift
Token
rest
Token
tok
static
Node
add
Token
rest
Token
tok
static
Node
new_add
Node
lhs
Node
rhs
Token
tok
static
Node
new_sub
Node
lhs
Node
rhs
Token
tok
static
Node
mul
Token
rest
Token
tok
static
Node
cast
Token
rest
Token
tok
static
Member
get_struct_member
Type
ty
Token
tok
static
Type
struct_decl
Token
rest
Token
tok
static
Type
union_decl
Token
rest
Token
tok
static
Node
postfix
Token
rest
Token
tok
static
Node
funcall
Token
rest
Token
tok
Node
node
static
Node
unary
Token
rest
Token
tok
static
Node
primary
Token
rest
Token
tok
static
Token
parse_typedef
Token
tok
Type
basety
static
bool
is_function
Token
tok
static
Token
function
Token
tok
Type
basety
VarAttr
attr
static
Token
global_variable
Token
tok
Type
basety
VarAttr
attr
static
int
align_down
int
n
int
align
return
codegen_align_to
n
align
align
static
void
enter_scope
void
Scope
sc
calloc
sizeof
Scope
sc
next
scope
scope
sc
static
void
leave_scope
void
scope
scope
next
static
VarScope
find_var
Token
tok
for
Scope
sc
scope
sc
sc
sc
next
VarScope
sc2
hashmap_get2
sc
vars
tok
loc
tok
len
if
sc2
return
sc2
return
NULL
static
Type
find_tag
Token
tok
for
Scope
sc
scope
sc
sc
sc
next
Type
ty
hashmap_get2
sc
tags
tok
loc
tok
len
if
ty
return
ty
return
NULL
static
Node
new_node
NodeKind
kind
Token
tok
Node
node
arena_allocate
a_node
node
kind
kind
node
tok
tok
return
node
static
Node
new_binary
NodeKind
kind
Node
lhs
Node
rhs
Token
tok
Node
node
new_node
kind
tok
node
lhs
lhs
node
rhs
rhs
return
node
static
Node
new_unary
NodeKind
kind
Node
expr
Token
tok
Node
node
new_node
kind
tok
node
lhs
expr
return
node
static
Node
new_num
int64_t
val
Token
tok
Node
node
new_node
ND_NUM
tok
node
val
val
return
node
static
Node
new_long
int64_t
val
Token
tok
Node
node
new_node
ND_NUM
tok
node
val
val
node
ty
ty_long
return
node
static
Node
new_ulong
long
val
Token
tok
Node
node
new_node
ND_NUM
tok
node
val
val
node
ty
ty_ulong
return
node
static
Node
new_var_node
Obj
var
Token
tok
Node
node
new_node
ND_VAR
tok
node
var
var
return
node
static
Node
new_vla_ptr
Obj
var
Token
tok
Node
node
new_node
ND_VLA_PTR
tok
node
var
var
return
node
Node
new_cast
Node
expr
Type
ty
add_type
expr
Node
node
arena_allocate
a_node
node
kind
ND_CAST
node
tok
expr
tok
node
lhs
expr
node
ty
copy_type
ty
return
node
static
VarScope
push_scope
char
name
VarScope
sc
calloc
sizeof
VarScope
hashmap_put
scope
vars
name
sc
return
sc
static
Initializer
new_initializer
Type
ty
bool
is_flexible
Initializer
init
calloc
sizeof
Initializer
init
ty
ty
if
ty
kind
TY_ARRAY
if
is_flexible
ty
size
init
is_flexible
true
return
init
init
children
calloc
ty
array_len
sizeof
Initializer
for
int
i
i
ty
array_len
i
init
children
i
new_initializer
ty
base
false
return
init
if
ty
kind
TY_STRUCT
ty
kind
TY_UNION
int
len
for
Member
mem
ty
members
mem
mem
mem
next
len
init
children
calloc
len
sizeof
Initializer
for
Member
mem
ty
members
mem
mem
mem
next
if
is_flexible
ty
is_flexible
mem
next
Initializer
child
calloc
sizeof
Initializer
child
ty
mem
ty
child
is_flexible
true
init
children
mem
idx
child
else
init
children
mem
idx
new_initializer
mem
ty
false
return
init
return
init
static
Obj
new_var
char
name
Type
ty
Obj
var
arena_allocate
a_obj
var
name
name
var
ty
ty
var
align
ty
align
push_scope
name
var
var
return
var
static
Obj
new_lvar
char
name
Type
ty
Obj
var
new_var
name
ty
var
is_local
true
var
next
locals
locals
var
return
var
static
Obj
new_gvar
char
name
Type
ty
Obj
var
new_var
name
ty
var
next
globals
var
is_static
true
var
is_definition
true
globals
var
return
var
static
char
new_unique_name
void
static
int
id
return
format
id
static
Obj
new_anon_gvar
Type
ty
return
new_gvar
new_unique_name
ty
static
Obj
new_string_literal
char
p
Type
ty
Obj
var
new_anon_gvar
ty
var
init_data
p
return
var
static
char
get_ident
Token
tok
if
tok
kind
TK_IDENT
error_tok
tok
return
strndup
tok
loc
tok
len
static
Type
find_typedef
Token
tok
if
tok
kind
TK_IDENT
VarScope
sc
find_var
tok
if
sc
return
sc
type_def
return
NULL
static
void
push_tag_scope
Token
tok
Type
ty
hashmap_put2
scope
tags
tok
loc
tok
len
ty
static
Type
declspec
Token
rest
Token
tok
VarAttr
attr
enum
VOID
BOOL
CHAR
SHORT
INT
LONG
FLOAT
DOUBLE
OTHER
SIGNED
UNSIGNED
Type
ty
ty_int
int
counter
bool
is_atomic
false
while
is_typename
tok
if
equal
tok
equal
tok
equal
tok
equal
tok
equal
tok
equal
tok
if
attr
error_tok
tok
if
equal
tok
attr
is_typedef
true
else
if
equal
tok
attr
is_static
true
else
if
equal
tok
attr
is_extern
true
else
if
equal
tok
attr
is_inline
true
else
attr
is_tls
true
if
attr
is_typedef
attr
is_static
attr
is_extern
attr
is_inline
attr
is_tls
error_tok
tok
tok
tok
next
continue
if
consume
tok
tok
consume
tok
tok
consume
tok
tok
consume
tok
tok
consume
tok
tok
consume
tok
tok
consume
tok
tok
consume
tok
tok
continue
if
equal
tok
tok
tok
next
if
equal
tok
ty
typename
tok
tok
next
tok
skip
tok
is_atomic
true
continue
if
equal
tok
if
attr
error_tok
tok
tok
skip
tok
next
if
is_typename
tok
attr
align
typename
tok
tok
align
else
attr
align
const_expr
tok
tok
tok
skip
tok
continue
Type
ty2
find_typedef
tok
if
equal
tok
equal
tok
equal
tok
equal
tok
ty2
if
counter
break
if
equal
tok
ty
struct_decl
tok
tok
next
else
if
equal
tok
ty
union_decl
tok
tok
next
else
if
equal
tok
ty
enum_specifier
tok
tok
next
else
if
equal
tok
ty
typeof_specifier
tok
tok
next
else
ty
ty2
tok
tok
next
counter
OTHER
continue
if
equal
tok
counter
VOID
else
if
equal
tok
counter
BOOL
else
if
equal
tok
counter
CHAR
else
if
equal
tok
counter
SHORT
else
if
equal
tok
counter
INT
else
if
equal
tok
counter
LONG
else
if
equal
tok
counter
FLOAT
else
if
equal
tok
counter
DOUBLE
else
if
equal
tok
counter
SIGNED
else
if
equal
tok
counter
UNSIGNED
else
unreachable
switch
counter
case
VOID
ty
ty_void
break
case
BOOL
ty
ty_bool
break
case
CHAR
case
SIGNED
CHAR
ty
ty_char
break
case
UNSIGNED
CHAR
ty
ty_uchar
break
case
SHORT
case
SHORT
INT
case
SIGNED
SHORT
case
SIGNED
SHORT
INT
ty
ty_short
break
case
UNSIGNED
SHORT
case
UNSIGNED
SHORT
INT
ty
ty_ushort
break
case
INT
case
SIGNED
case
SIGNED
INT
ty
ty_int
break
case
UNSIGNED
case
UNSIGNED
INT
ty
ty_uint
break
case
LONG
case
LONG
INT
case
LONG
LONG
case
LONG
LONG
INT
case
SIGNED
LONG
case
SIGNED
LONG
INT
case
SIGNED
LONG
LONG
case
SIGNED
LONG
LONG
INT
ty
ty_long
break
case
UNSIGNED
LONG
case
UNSIGNED
LONG
INT
case
UNSIGNED
LONG
LONG
case
UNSIGNED
LONG
LONG
INT
ty
ty_ulong
break
case
FLOAT
ty
ty_float
break
case
DOUBLE
ty
ty_double
break
case
LONG
DOUBLE
ty
ty_ldouble
break
default
error_tok
tok
tok
tok
next
if
is_atomic
ty
copy_type
ty
ty
is_atomic
true
rest
tok
return
ty
static
Type
func_params
Token
rest
Token
tok
Type
ty
if
equal
tok
equal
tok
next
rest
tok
next
next
return
func_type
ty
Type
head
Type
cur
head
bool
is_variadic
false
while
equal
tok
if
cur
head
tok
skip
tok
if
equal
tok
is_variadic
true
tok
tok
next
skip
tok
break
Type
ty2
declspec
tok
tok
NULL
ty2
declarator
tok
tok
ty2
Token
name
ty2
name
if
ty2
kind
TY_ARRAY
ty2
pointer_to
ty2
base
ty2
name
name
else
if
ty2
kind
TY_FUNC
ty2
pointer_to
ty2
ty2
name
name
cur
cur
next
copy_type
ty2
if
cur
head
is_variadic
true
ty
func_type
ty
ty
params
head
next
ty
is_variadic
is_variadic
rest
tok
next
return
ty
static
Type
array_dimensions
Token
rest
Token
tok
Type
ty
while
equal
tok
equal
tok
tok
tok
next
if
equal
tok
ty
type_suffix
rest
tok
next
ty
return
array_of
ty
Node
expr
conditional
tok
tok
tok
skip
tok
ty
type_suffix
rest
tok
ty
if
ty
kind
TY_VLA
is_const_expr
expr
return
vla_of
ty
expr
return
array_of
ty
eval
expr
static
Type
type_suffix
Token
rest
Token
tok
Type
ty
if
equal
tok
return
func_params
rest
tok
next
ty
if
equal
tok
return
array_dimensions
rest
tok
next
ty
rest
tok
return
ty
static
Type
pointers
Token
rest
Token
tok
Type
ty
while
consume
tok
tok
ty
pointer_to
ty
while
equal
tok
equal
tok
equal
tok
equal
tok
equal
tok
tok
tok
next
rest
tok
return
ty
static
Type
declarator
Token
rest
Token
tok
Type
ty
ty
pointers
tok
tok
ty
if
equal
tok
Token
start
tok
Type
dummy
declarator
tok
start
next
dummy
tok
skip
tok
ty
type_suffix
rest
tok
ty
return
declarator
tok
start
next
ty
Token
name
NULL
Token
name_pos
tok
if
tok
kind
TK_IDENT
name
tok
tok
tok
next
ty
type_suffix
rest
tok
ty
ty
name
name
ty
name_pos
name_pos
return
ty
static
Type
abstract_declarator
Token
rest
Token
tok
Type
ty
ty
pointers
tok
tok
ty
if
equal
tok
Token
start
tok
Type
dummy
abstract_declarator
tok
start
next
dummy
tok
skip
tok
ty
type_suffix
rest
tok
ty
return
abstract_declarator
tok
start
next
ty
return
type_suffix
rest
tok
ty
static
Type
typename
Token
rest
Token
tok
Type
ty
declspec
tok
tok
NULL
return
abstract_declarator
rest
tok
ty
static
bool
is_end
Token
tok
return
equal
tok
equal
tok
equal
tok
next
static
bool
consume_end
Token
rest
Token
tok
if
equal
tok
rest
tok
next
return
true
if
equal
tok
equal
tok
next
rest
tok
next
next
return
true
return
false
static
Type
enum_specifier
Token
rest
Token
tok
Type
ty
enum_type
Token
tag
NULL
if
tok
kind
TK_IDENT
tag
tok
tok
tok
next
if
tag
equal
tok
Type
ty
find_tag
tag
if
ty
error_tok
tag
if
ty
kind
TY_ENUM
error_tok
tag
rest
tok
return
ty
tok
skip
tok
int
i
int
val
while
consume_end
rest
tok
if
i
tok
skip
tok
char
name
get_ident
tok
tok
tok
next
if
equal
tok
val
const_expr
tok
tok
next
VarScope
sc
push_scope
name
sc
enum_ty
ty
sc
enum_val
val
if
tag
push_tag_scope
tag
ty
return
ty
static
Type
typeof_specifier
Token
rest
Token
tok
tok
skip
tok
Type
ty
if
is_typename
tok
ty
typename
tok
tok
else
Node
node
expr
tok
tok
add_type
node
ty
node
ty
rest
skip
tok
return
ty
static
Node
compute_vla_size
Type
ty
Token
tok
Node
node
new_node
ND_NULL_EXPR
tok
if
ty
base
node
new_binary
ND_COMMA
node
compute_vla_size
ty
base
tok
tok
if
ty
kind
TY_VLA
return
node
Node
base_sz
if
ty
base
kind
TY_VLA
base_sz
new_var_node
ty
base
vla_size
tok
else
base_sz
new_num
ty
base
size
tok
ty
vla_size
new_lvar
ty_ulong
Node
expr
new_binary
ND_ASSIGN
new_var_node
ty
vla_size
tok
new_binary
ND_MUL
ty
vla_len
base_sz
tok
tok
return
new_binary
ND_COMMA
node
expr
tok
static
Node
new_alloca
Node
sz
Node
node
new_unary
ND_FUNCALL
new_var_node
builtin_alloca
sz
tok
sz
tok
node
func_ty
builtin_alloca
ty
node
ty
builtin_alloca
ty
return_ty
node
args
sz
add_type
sz
return
node
static
Node
declaration
Token
rest
Token
tok
Type
basety
VarAttr
attr
Node
head
Node
cur
head
int
i
while
equal
tok
if
i
tok
skip
tok
Type
ty
declarator
tok
tok
basety
if
ty
kind
TY_VOID
error_tok
tok
if
ty
name
error_tok
ty
name_pos
if
attr
attr
is_static
Obj
var
new_anon_gvar
ty
push_scope
get_ident
ty
name
var
var
if
equal
tok
gvar_initializer
tok
tok
next
var
continue
cur
cur
next
new_unary
ND_EXPR_STMT
compute_vla_size
ty
tok
tok
if
ty
kind
TY_VLA
if
equal
tok
error_tok
tok
Obj
var
new_lvar
get_ident
ty
name
ty
Token
tok
ty
name
Node
expr
new_binary
ND_ASSIGN
new_vla_ptr
var
tok
new_alloca
new_var_node
ty
vla_size
tok
tok
cur
cur
next
new_unary
ND_EXPR_STMT
expr
tok
continue
Obj
var
new_lvar
get_ident
ty
name
ty
if
attr
attr
align
var
align
attr
align
if
equal
tok
Node
expr
lvar_initializer
tok
tok
next
var
cur
cur
next
new_unary
ND_EXPR_STMT
expr
tok
if
var
ty
size
error_tok
ty
name
if
var
ty
kind
TY_VOID
error_tok
ty
name
Node
node
new_node
ND_BLOCK
tok
node
body
head
next
rest
tok
next
return
node
static
Token
skip_excess_element
Token
tok
if
equal
tok
tok
skip_excess_element
tok
next
return
skip
tok
assign
tok
tok
return
tok
static
void
string_initializer
Token
rest
Token
tok
Initializer
init
if
init
is_flexible
init
new_initializer
array_of
init
ty
base
tok
ty
array_len
false
int
len
MIN
init
ty
array_len
tok
ty
array_len
switch
init
ty
base
size
case
char
str
tok
str
for
int
i
i
len
i
init
children
i
expr
new_num
str
i
tok
break
case
uint16_t
str
uint16_t
tok
str
for
int
i
i
len
i
init
children
i
expr
new_num
str
i
tok
break
case
uint32_t
str
uint32_t
tok
str
for
int
i
i
len
i
init
children
i
expr
new_num
str
i
tok
break
default
unreachable
rest
tok
next
static
void
array_designator
Token
rest
Token
tok
Type
ty
int
begin
int
end
begin
const_expr
tok
tok
next
if
begin
ty
array_len
error_tok
tok
if
equal
tok
end
const_expr
tok
tok
next
if
end
ty
array_len
error_tok
tok
if
end
begin
error_tok
tok
begin
end
else
end
begin
rest
skip
tok
static
Member
struct_designator
Token
rest
Token
tok
Type
ty
Token
start
tok
tok
skip
tok
if
tok
kind
TK_IDENT
error_tok
tok
for
Member
mem
ty
members
mem
mem
mem
next
if
mem
ty
kind
TY_STRUCT
mem
name
if
get_struct_member
mem
ty
tok
rest
start
return
mem
continue
if
mem
name
len
tok
len
strncmp
mem
name
loc
tok
loc
tok
len
rest
tok
next
return
mem
error_tok
tok
static
void
designation
Token
rest
Token
tok
Initializer
init
if
equal
tok
if
init
ty
kind
TY_ARRAY
error_tok
tok
int
begin
end
array_designator
tok
tok
init
ty
begin
end
Token
tok2
for
int
i
begin
i
end
i
designation
tok2
tok
init
children
i
array_initializer2
rest
tok2
init
begin
return
if
equal
tok
init
ty
kind
TY_STRUCT
Member
mem
struct_designator
tok
tok
init
ty
designation
tok
tok
init
children
mem
idx
init
expr
NULL
struct_initializer2
rest
tok
init
mem
next
return
if
equal
tok
init
ty
kind
TY_UNION
Member
mem
struct_designator
tok
tok
init
ty
init
mem
mem
designation
rest
tok
init
children
mem
idx
return
if
equal
tok
error_tok
tok
if
equal
tok
tok
tok
next
initializer2
rest
tok
init
static
int
count_array_init_elements
Token
tok
Type
ty
bool
first
true
Initializer
dummy
new_initializer
ty
base
true
int
i
max
while
consume_end
tok
tok
if
first
tok
skip
tok
first
false
if
equal
tok
i
const_expr
tok
tok
next
if
equal
tok
i
const_expr
tok
tok
next
tok
skip
tok
designation
tok
tok
dummy
else
initializer2
tok
tok
dummy
i
max
MAX
max
i
return
max
static
void
array_initializer1
Token
rest
Token
tok
Initializer
init
tok
skip
tok
if
init
is_flexible
int
len
count_array_init_elements
tok
init
ty
init
new_initializer
array_of
init
ty
base
len
false
bool
first
true
if
init
is_flexible
int
len
count_array_init_elements
tok
init
ty
init
new_initializer
array_of
init
ty
base
len
false
for
int
i
consume_end
rest
tok
i
if
first
tok
skip
tok
first
false
if
equal
tok
int
begin
end
array_designator
tok
tok
init
ty
begin
end
Token
tok2
for
int
j
begin
j
end
j
designation
tok2
tok
init
children
j
tok
tok2
i
end
continue
if
i
init
ty
array_len
initializer2
tok
tok
init
children
i
else
tok
skip_excess_element
tok
static
void
array_initializer2
Token
rest
Token
tok
Initializer
init
int
i
if
init
is_flexible
int
len
count_array_init_elements
tok
init
ty
init
new_initializer
array_of
init
ty
base
len
false
for
i
init
ty
array_len
is_end
tok
i
Token
start
tok
if
i
tok
skip
tok
if
equal
tok
equal
tok
rest
start
return
initializer2
tok
tok
init
children
i
rest
tok
static
void
struct_initializer1
Token
rest
Token
tok
Initializer
init
tok
skip
tok
Member
mem
init
ty
members
bool
first
true
while
consume_end
rest
tok
if
first
tok
skip
tok
first
false
if
equal
tok
mem
struct_designator
tok
tok
init
ty
designation
tok
tok
init
children
mem
idx
mem
mem
next
continue
if
mem
initializer2
tok
tok
init
children
mem
idx
mem
mem
next
else
tok
skip_excess_element
tok
static
void
struct_initializer2
Token
rest
Token
tok
Initializer
init
Member
mem
bool
first
true
for
mem
is_end
tok
mem
mem
next
Token
start
tok
if
first
tok
skip
tok
first
false
if
equal
tok
equal
tok
rest
start
return
initializer2
tok
tok
init
children
mem
idx
rest
tok
static
void
union_initializer
Token
rest
Token
tok
Initializer
init
if
equal
tok
equal
tok
next
Member
mem
struct_designator
tok
tok
next
init
ty
init
mem
mem
designation
tok
tok
init
children
mem
idx
rest
skip
tok
return
init
mem
init
ty
members
if
equal
tok
initializer2
tok
tok
next
init
children
consume
tok
tok
rest
skip
tok
else
initializer2
rest
tok
init
children
static
void
initializer2
Token
rest
Token
tok
Initializer
init
if
init
ty
kind
TY_ARRAY
tok
kind
TK_STR
string_initializer
rest
tok
init
return
if
init
ty
kind
TY_ARRAY
if
equal
tok
array_initializer1
rest
tok
init
else
array_initializer2
rest
tok
init
return
if
init
ty
kind
TY_STRUCT
if
equal
tok
struct_initializer1
rest
tok
init
return
Node
expr
assign
rest
tok
add_type
expr
if
expr
ty
kind
TY_STRUCT
init
expr
expr
return
struct_initializer2
rest
tok
init
init
ty
members
return
if
init
ty
kind
TY_UNION
union_initializer
rest
tok
init
return
if
equal
tok
initializer2
tok
tok
next
init
rest
skip
tok
return
init
expr
assign
rest
tok
static
Type
copy_struct_type
Type
ty
ty
copy_type
ty
Member
head
Member
cur
head
if
a_member
head
NULL
arena_setup
a_member
sizeof
Member
for
Member
mem
ty
members
mem
mem
mem
next
Member
m
arena_allocate
a_member
memcpy
m
mem
sizeof
Member
cur
cur
next
m
ty
members
head
next
return
ty
static
Initializer
initializer
Token
rest
Token
tok
Type
ty
Type
new_ty
Initializer
init
new_initializer
ty
true
initializer2
rest
tok
init
if
ty
kind
TY_STRUCT
ty
kind
TY_UNION
ty
is_flexible
ty
copy_struct_type
ty
Member
mem
ty
members
while
mem
next
mem
mem
next
mem
ty
init
children
mem
idx
ty
ty
size
mem
ty
size
new_ty
ty
return
init
new_ty
init
ty
return
init
static
Node
init_desg_expr
InitDesg
desg
Token
tok
if
desg
var
return
new_var_node
desg
var
tok
if
desg
member
Node
node
new_unary
ND_MEMBER
init_desg_expr
desg
next
tok
tok
node
member
desg
member
return
node
Node
lhs
init_desg_expr
desg
next
tok
Node
rhs
new_num
desg
idx
tok
return
new_unary
ND_DEREF
new_add
lhs
rhs
tok
tok
static
Node
create_lvar_init
Initializer
init
Type
ty
InitDesg
desg
Token
tok
if
ty
kind
TY_ARRAY
Node
node
new_node
ND_NULL_EXPR
tok
for
int
i
i
ty
array_len
i
InitDesg
desg2
desg
i
Node
rhs
create_lvar_init
init
children
i
ty
base
desg2
tok
node
new_binary
ND_COMMA
node
rhs
tok
return
node
if
ty
kind
TY_STRUCT
init
expr
Node
node
new_node
ND_NULL_EXPR
tok
for
Member
mem
ty
members
mem
mem
mem
next
InitDesg
desg2
desg
mem
Node
rhs
create_lvar_init
init
children
mem
idx
mem
ty
desg2
tok
node
new_binary
ND_COMMA
node
rhs
tok
return
node
if
ty
kind
TY_UNION
Member
mem
init
mem
init
mem
ty
members
InitDesg
desg2
desg
mem
return
create_lvar_init
init
children
mem
idx
mem
ty
desg2
tok
if
init
expr
return
new_node
ND_NULL_EXPR
tok
Node
lhs
init_desg_expr
desg
tok
return
new_binary
ND_ASSIGN
lhs
init
expr
tok
static
Node
lvar_initializer
Token
rest
Token
tok
Obj
var
Initializer
init
initializer
rest
tok
var
ty
var
ty
InitDesg
desg
NULL
NULL
var
Node
lhs
new_node
ND_MEMZERO
tok
lhs
var
var
Node
rhs
create_lvar_init
init
var
ty
desg
tok
return
new_binary
ND_COMMA
lhs
rhs
tok
static
uint64_t
read_buf
char
buf
int
sz
if
sz
return
buf
if
sz
return
uint16_t
buf
if
sz
return
uint32_t
buf
if
sz
return
uint64_t
buf
unreachable
static
void
write_buf
char
buf
uint64_t
val
int
sz
if
sz
buf
val
else
if
sz
uint16_t
buf
val
else
if
sz
uint32_t
buf
val
else
if
sz
uint64_t
buf
val
else
unreachable
static
Relocation
write_gvar_data
Relocation
cur
Initializer
init
Type
ty
char
buf
int
offset
if
ty
kind
TY_ARRAY
int
sz
ty
base
size
for
int
i
i
ty
array_len
i
cur
write_gvar_data
cur
init
children
i
ty
base
buf
offset
sz
i
return
cur
if
ty
kind
TY_STRUCT
for
Member
mem
ty
members
mem
mem
mem
next
if
mem
is_bitfield
Node
expr
init
children
mem
idx
expr
if
expr
break
char
loc
buf
offset
mem
offset
uint64_t
oldval
read_buf
loc
mem
ty
size
uint64_t
newval
eval
expr
uint64_t
mask
L
mem
bit_width
uint64_t
combined
oldval
newval
mask
mem
bit_offset
write_buf
loc
combined
mem
ty
size
else
cur
write_gvar_data
cur
init
children
mem
idx
mem
ty
buf
offset
mem
offset
return
cur
if
ty
kind
TY_UNION
if
init
mem
return
cur
return
write_gvar_data
cur
init
children
init
mem
idx
init
mem
ty
buf
offset
if
init
expr
return
cur
if
ty
kind
TY_FLOAT
float
buf
offset
eval_double
init
expr
return
cur
if
ty
kind
TY_DOUBLE
double
buf
offset
eval_double
init
expr
return
cur
char
label
NULL
uint64_t
val
eval2
init
expr
label
if
label
write_buf
buf
offset
val
ty
size
return
cur
Relocation
rel
calloc
sizeof
Relocation
rel
offset
offset
rel
label
label
rel
addend
val
cur
next
rel
return
cur
next
static
void
gvar_initializer
Token
rest
Token
tok
Obj
var
Initializer
init
initializer
rest
tok
var
ty
var
ty
Relocation
head
char
buf
calloc
var
ty
size
write_gvar_data
head
init
var
ty
buf
var
init_data
buf
var
rel
head
next
static
bool
is_typename
Token
tok
static
HashMap
map
if
map
capacity
static
char
kw
for
int
i
i
sizeof
kw
sizeof
kw
i
hashmap_put
map
kw
i
void
return
hashmap_get2
map
tok
loc
tok
len
find_typedef
tok
static
Node
asm_stmt
Token
rest
Token
tok
Node
node
new_node
ND_ASM
tok
tok
tok
next
while
equal
tok
equal
tok
tok
tok
next
tok
skip
tok
if
tok
kind
TK_STR
tok
ty
base
kind
TY_CHAR
error_tok
tok
node
asm_str
tok
str
rest
skip
tok
next
return
node
static
Node
stmt
Token
rest
Token
tok
if
equal
tok
Node
node
new_node
ND_RETURN
tok
if
consume
rest
tok
next
return
node
Node
exp
expr
tok
tok
next
rest
skip
tok
add_type
exp
Type
ty
current_fn
ty
return_ty
if
ty
kind
TY_STRUCT
ty
kind
TY_UNION
exp
new_cast
exp
current_fn
ty
return_ty
node
lhs
exp
return
node
if
equal
tok
Node
node
new_node
ND_IF
tok
tok
skip
tok
next
node
cond
expr
tok
tok
tok
skip
tok
node
then
stmt
tok
tok
if
equal
tok
node
els
stmt
tok
tok
next
rest
tok
return
node
if
equal
tok
Node
node
new_node
ND_SWITCH
tok
tok
skip
tok
next
node
cond
expr
tok
tok
tok
skip
tok
Node
sw
current_switch
current_switch
node
char
brk
brk_label
brk_label
node
brk_label
new_unique_name
node
then
stmt
rest
tok
current_switch
sw
brk_label
brk
return
node
if
equal
tok
if
current_switch
error_tok
tok
Node
node
new_node
ND_CASE
tok
int
begin
const_expr
tok
tok
next
int
end
if
equal
tok
end
const_expr
tok
tok
next
if
end
begin
error_tok
tok
else
end
begin
tok
skip
tok
node
label
new_unique_name
node
lhs
stmt
rest
tok
node
begin
begin
node
end
end
node
case_next
current_switch
case_next
current_switch
case_next
node
return
node
if
equal
tok
if
current_switch
error_tok
tok
Node
node
new_node
ND_CASE
tok
tok
skip
tok
next
node
label
new_unique_name
node
lhs
stmt
rest
tok
current_switch
default_case
node
return
node
if
equal
tok
Node
node
new_node
ND_FOR
tok
tok
skip
tok
next
enter_scope
char
brk
brk_label
char
cont
cont_label
brk_label
node
brk_label
new_unique_name
cont_label
node
cont_label
new_unique_name
if
is_typename
tok
Type
basety
declspec
tok
tok
NULL
node
init
declaration
tok
tok
basety
NULL
else
node
init
expr_stmt
tok
tok
if
equal
tok
node
cond
expr
tok
tok
tok
skip
tok
if
equal
tok
node
inc
expr
tok
tok
tok
skip
tok
node
then
stmt
rest
tok
leave_scope
brk_label
brk
cont_label
cont
return
node
if
equal
tok
Node
node
new_node
ND_FOR
tok
tok
skip
tok
next
node
cond
expr
tok
tok
tok
skip
tok
char
brk
brk_label
char
cont
cont_label
brk_label
node
brk_label
new_unique_name
cont_label
node
cont_label
new_unique_name
node
then
stmt
rest
tok
brk_label
brk
cont_label
cont
return
node
if
equal
tok
Node
node
new_node
ND_DO
tok
char
brk
brk_label
char
cont
cont_label
brk_label
node
brk_label
new_unique_name
cont_label
node
cont_label
new_unique_name
node
then
stmt
tok
tok
next
brk_label
brk
cont_label
cont
tok
skip
tok
tok
skip
tok
node
cond
expr
tok
tok
tok
skip
tok
rest
skip
tok
return
node
if
equal
tok
return
asm_stmt
rest
tok
if
equal
tok
if
equal
tok
next
Node
node
new_node
ND_GOTO_EXPR
tok
node
lhs
expr
tok
tok
next
next
rest
skip
tok
return
node
Node
node
new_node
ND_GOTO
tok
node
label
get_ident
tok
next
node
goto_next
gotos
gotos
node
rest
skip
tok
next
next
return
node
if
equal
tok
if
brk_label
error_tok
tok
Node
node
new_node
ND_GOTO
tok
node
unique_label
brk_label
rest
skip
tok
next
return
node
if
equal
tok
if
cont_label
error_tok
tok
Node
node
new_node
ND_GOTO
tok
node
unique_label
cont_label
rest
skip
tok
next
return
node
if
tok
kind
TK_IDENT
equal
tok
next
Node
node
new_node
ND_LABEL
tok
node
label
strndup
tok
loc
tok
len
node
unique_label
new_unique_name
node
lhs
stmt
rest
tok
next
next
node
goto_next
labels
labels
node
return
node
if
equal
tok
return
compound_stmt
rest
tok
next
return
expr_stmt
rest
tok
static
Node
compound_stmt
Token
rest
Token
tok
Node
node
new_node
ND_BLOCK
tok
Node
head
Node
cur
head
enter_scope
while
equal
tok
if
is_typename
tok
equal
tok
next
VarAttr
attr
Type
basety
declspec
tok
tok
attr
if
attr
is_typedef
tok
parse_typedef
tok
basety
continue
if
is_function
tok
tok
function
tok
basety
attr
continue
if
attr
is_extern
tok
global_variable
tok
basety
attr
continue
cur
cur
next
declaration
tok
tok
basety
attr
else
cur
cur
next
stmt
tok
tok
add_type
cur
leave_scope
node
body
head
next
rest
tok
next
return
node
static
Node
expr_stmt
Token
rest
Token
tok
if
equal
tok
rest
tok
next
return
new_node
ND_BLOCK
tok
Node
node
new_node
ND_EXPR_STMT
tok
node
lhs
expr
tok
tok
rest
skip
tok
return
node
static
Node
expr
Token
rest
Token
tok
Node
node
assign
tok
tok
if
equal
tok
return
new_binary
ND_COMMA
node
expr
rest
tok
next
tok
rest
tok
return
node
static
int64_t
eval
Node
node
return
eval2
node
NULL
static
int64_t
eval2
Node
node
char
label
add_type
node
if
is_flonum
node
ty
return
eval_double
node
switch
node
kind
case
ND_ADD
return
eval2
node
lhs
label
eval
node
rhs
case
ND_SUB
return
eval2
node
lhs
label
eval
node
rhs
case
ND_MUL
return
eval
node
lhs
eval
node
rhs
case
ND_DIV
if
node
ty
is_unsigned
return
uint64_t
eval
node
lhs
eval
node
rhs
return
eval
node
lhs
eval
node
rhs
case
ND_NEG
return
eval
node
lhs
case
ND_MOD
if
node
ty
is_unsigned
return
uint64_t
eval
node
lhs
eval
node
rhs
return
eval
node
lhs
eval
node
rhs
case
ND_BITAND
return
eval
node
lhs
eval
node
rhs
case
ND_BITOR
return
eval
node
lhs
eval
node
rhs
case
ND_BITXOR
return
eval
node
lhs
eval
node
rhs
case
ND_SHL
return
eval
node
lhs
eval
node
rhs
case
ND_SHR
if
node
ty
is_unsigned
node
ty
size
return
uint64_t
eval
node
lhs
eval
node
rhs
return
eval
node
lhs
eval
node
rhs
case
ND_EQ
return
eval
node
lhs
eval
node
rhs
case
ND_NE
return
eval
node
lhs
eval
node
rhs
case
ND_LT
if
node
lhs
ty
is_unsigned
return
uint64_t
eval
node
lhs
eval
node
rhs
return
eval
node
lhs
eval
node
rhs
case
ND_LE
if
node
lhs
ty
is_unsigned
return
uint64_t
eval
node
lhs
eval
node
rhs
return
eval
node
lhs
eval
node
rhs
case
ND_COND
return
eval
node
cond
eval2
node
then
label
eval2
node
els
label
case
ND_COMMA
return
eval2
node
rhs
label
case
ND_NOT
return
eval
node
lhs
case
ND_BITNOT
return
eval
node
lhs
case
ND_LOGAND
return
eval
node
lhs
eval
node
rhs
case
ND_LOGOR
return
eval
node
lhs
eval
node
rhs
case
ND_CAST
int64_t
val
eval2
node
lhs
label
if
is_integer
node
ty
switch
node
ty
size
case
return
node
ty
is_unsigned
uint8_t
val
int8_t
val
case
return
node
ty
is_unsigned
uint16_t
val
int16_t
val
case
return
node
ty
is_unsigned
uint32_t
val
int32_t
val
return
val
case
ND_ADDR
return
eval_rval
node
lhs
label
case
ND_LABEL_VAL
label
node
unique_label
return
case
ND_MEMBER
if
label
error_tok
node
tok
if
node
ty
kind
TY_ARRAY
error_tok
node
tok
return
eval_rval
node
lhs
label
node
member
offset
case
ND_VAR
if
label
error_tok
node
tok
if
node
var
ty
kind
TY_ARRAY
node
var
ty
kind
TY_FUNC
error_tok
node
tok
label
node
var
name
return
case
ND_NUM
return
node
val
error_tok
node
tok
static
int64_t
eval_rval
Node
node
char
label
switch
node
kind
case
ND_VAR
if
node
var
is_local
error_tok
node
tok
label
node
var
name
return
case
ND_DEREF
return
eval2
node
lhs
label
case
ND_MEMBER
return
eval_rval
node
lhs
label
node
member
offset
error_tok
node
tok
static
bool
is_const_expr
Node
node
add_type
node
switch
node
kind
case
ND_ADD
case
ND_SUB
case
ND_MUL
case
ND_DIV
case
ND_BITAND
case
ND_BITOR
case
ND_BITXOR
case
ND_SHL
case
ND_SHR
case
ND_EQ
case
ND_NE
case
ND_LT
case
ND_LE
case
ND_LOGAND
case
ND_LOGOR
return
is_const_expr
node
lhs
is_const_expr
node
rhs
case
ND_COND
if
is_const_expr
node
cond
return
false
return
is_const_expr
eval
node
cond
node
then
node
els
case
ND_COMMA
return
is_const_expr
node
rhs
case
ND_NEG
case
ND_NOT
case
ND_BITNOT
case
ND_CAST
return
is_const_expr
node
lhs
case
ND_NUM
return
true
return
false
int64_t
const_expr
Token
rest
Token
tok
Node
node
conditional
rest
tok
return
eval
node
static
double
eval_double
Node
node
add_type
node
if
is_integer
node
ty
if
node
ty
is_unsigned
return
unsigned
long
eval
node
return
eval
node
switch
node
kind
case
ND_ADD
return
eval_double
node
lhs
eval_double
node
rhs
case
ND_SUB
return
eval_double
node
lhs
eval_double
node
rhs
case
ND_MUL
return
eval_double
node
lhs
eval_double
node
rhs
case
ND_DIV
return
eval_double
node
lhs
eval_double
node
rhs
case
ND_NEG
return
eval_double
node
lhs
case
ND_COND
return
eval_double
node
cond
eval_double
node
then
eval_double
node
els
case
ND_COMMA
return
eval_double
node
rhs
case
ND_CAST
if
is_flonum
node
lhs
ty
return
eval_double
node
lhs
return
eval
node
lhs
case
ND_NUM
return
node
fval
error_tok
node
tok
static
Node
to_assign
Node
binary
add_type
binary
lhs
add_type
binary
rhs
Token
tok
binary
tok
if
binary
lhs
kind
ND_MEMBER
Obj
var
new_lvar
pointer_to
binary
lhs
lhs
ty
Node
expr1
new_binary
ND_ASSIGN
new_var_node
var
tok
new_unary
ND_ADDR
binary
lhs
lhs
tok
tok
Node
expr2
new_unary
ND_MEMBER
new_unary
ND_DEREF
new_var_node
var
tok
tok
tok
expr2
member
binary
lhs
member
Node
expr3
new_unary
ND_MEMBER
new_unary
ND_DEREF
new_var_node
var
tok
tok
tok
expr3
member
binary
lhs
member
Node
expr4
new_binary
ND_ASSIGN
expr2
new_binary
binary
kind
expr3
binary
rhs
tok
tok
return
new_binary
ND_COMMA
expr1
expr4
tok
if
binary
lhs
ty
is_atomic
Node
head
Node
cur
head
Obj
addr
new_lvar
pointer_to
binary
lhs
ty
Obj
val
new_lvar
binary
rhs
ty
Obj
old
new_lvar
binary
lhs
ty
Obj
new
new_lvar
binary
lhs
ty
cur
cur
next
new_unary
ND_EXPR_STMT
new_binary
ND_ASSIGN
new_var_node
addr
tok
new_unary
ND_ADDR
binary
lhs
tok
tok
tok
cur
cur
next
new_unary
ND_EXPR_STMT
new_binary
ND_ASSIGN
new_var_node
val
tok
binary
rhs
tok
tok
cur
cur
next
new_unary
ND_EXPR_STMT
new_binary
ND_ASSIGN
new_var_node
old
tok
new_unary
ND_DEREF
new_var_node
addr
tok
tok
tok
tok
Node
loop
new_node
ND_DO
tok
loop
brk_label
new_unique_name
loop
cont_label
new_unique_name
Node
body
new_binary
ND_ASSIGN
new_var_node
new
tok
new_binary
binary
kind
new_var_node
old
tok
new_var_node
val
tok
tok
tok
loop
then
new_node
ND_BLOCK
tok
loop
then
body
new_unary
ND_EXPR_STMT
body
tok
Node
cas
new_node
ND_CAS
tok
cas
cas_addr
new_var_node
addr
tok
cas
cas_old
new_unary
ND_ADDR
new_var_node
old
tok
tok
cas
cas_new
new_var_node
new
tok
loop
cond
new_unary
ND_NOT
cas
tok
cur
cur
next
loop
cur
cur
next
new_unary
ND_EXPR_STMT
new_var_node
new
tok
tok
Node
node
new_node
ND_STMT_EXPR
tok
node
body
head
next
return
node
Obj
var
new_lvar
pointer_to
binary
lhs
ty
Node
expr1
new_binary
ND_ASSIGN
new_var_node
var
tok
new_unary
ND_ADDR
binary
lhs
tok
tok
Node
expr2
new_binary
ND_ASSIGN
new_unary
ND_DEREF
new_var_node
var
tok
tok
new_binary
binary
kind
new_unary
ND_DEREF
new_var_node
var
tok
tok
binary
rhs
tok
tok
return
new_binary
ND_COMMA
expr1
expr2
tok
static
Node
assign
Token
rest
Token
tok
Node
node
conditional
tok
tok
if
equal
tok
return
new_binary
ND_ASSIGN
node
assign
rest
tok
next
tok
if
equal
tok
return
to_assign
new_add
node
assign
rest
tok
next
tok
if
equal
tok
return
to_assign
new_sub
node
assign
rest
tok
next
tok
if
equal
tok
return
to_assign
new_binary
ND_MUL
node
assign
rest
tok
next
tok
if
equal
tok
return
to_assign
new_binary
ND_DIV
node
assign
rest
tok
next
tok
if
equal
tok
return
to_assign
new_binary
ND_MOD
node
assign
rest
tok
next
tok
if
equal
tok
return
to_assign
new_binary
ND_BITAND
node
assign
rest
tok
next
tok
if
equal
tok
return
to_assign
new_binary
ND_BITOR
node
assign
rest
tok
next
tok
if
equal
tok
return
to_assign
new_binary
ND_BITXOR
node
assign
rest
tok
next
tok
if
equal
tok
return
to_assign
new_binary
ND_SHL
node
assign
rest
tok
next
tok
if
equal
tok
return
to_assign
new_binary
ND_SHR
node
assign
rest
tok
next
tok
rest
tok
return
node
static
Node
conditional
Token
rest
Token
tok
Node
cond
logor
tok
tok
if
equal
tok
rest
tok
return
cond
if
equal
tok
next
add_type
cond
Obj
var
new_lvar
cond
ty
Node
lhs
new_binary
ND_ASSIGN
new_var_node
var
tok
cond
tok
Node
rhs
new_node
ND_COND
tok
rhs
cond
new_var_node
var
tok
rhs
then
new_var_node
var
tok
rhs
els
conditional
rest
tok
next
next
return
new_binary
ND_COMMA
lhs
rhs
tok
Node
node
new_node
ND_COND
tok
node
cond
cond
node
then
expr
tok
tok
next
tok
skip
tok
node
els
conditional
rest
tok
return
node
static
Node
logor
Token
rest
Token
tok
Node
node
logand
tok
tok
while
equal
tok
Token
start
tok
node
new_binary
ND_LOGOR
node
logand
tok
tok
next
start
rest
tok
return
node
static
Node
logand
Token
rest
Token
tok
Node
node
bitor
tok
tok
while
equal
tok
Token
start
tok
node
new_binary
ND_LOGAND
node
bitor
tok
tok
next
start
rest
tok
return
node
static
Node
bitor
Token
rest
Token
tok
Node
node
bitxor
tok
tok
while
equal
tok
Token
start
tok
node
new_binary
ND_BITOR
node
bitxor
tok
tok
next
start
rest
tok
return
node
static
Node
bitxor
Token
rest
Token
tok
Node
node
bitand
tok
tok
while
equal
tok
Token
start
tok
node
new_binary
ND_BITXOR
node
bitand
tok
tok
next
start
rest
tok
return
node
static
Node
bitand
Token
rest
Token
tok
Node
node
equality
tok
tok
while
equal
tok
Token
start
tok
node
new_binary
ND_BITAND
node
equality
tok
tok
next
start
rest
tok
return
node
static
Node
equality
Token
rest
Token
tok
Node
node
relational
tok
tok
for
Token
start
tok
if
equal
tok
node
new_binary
ND_EQ
node
relational
tok
tok
next
start
continue
if
equal
tok
node
new_binary
ND_NE
node
relational
tok
tok
next
start
continue
rest
tok
return
node
static
Node
relational
Token
rest
Token
tok
Node
node
shift
tok
tok
for
Token
start
tok
if
equal
tok
node
new_binary
ND_LT
node
shift
tok
tok
next
start
continue
if
equal
tok
node
new_binary
ND_LE
node
shift
tok
tok
next
start
continue
if
equal
tok
node
new_binary
ND_LT
shift
tok
tok
next
node
start
continue
if
equal
tok
node
new_binary
ND_LE
shift
tok
tok
next
node
start
continue
rest
tok
return
node
static
Node
shift
Token
rest
Token
tok
Node
node
add
tok
tok
for
Token
start
tok
if
equal
tok
node
new_binary
ND_SHL
node
add
tok
tok
next
start
continue
if
equal
tok
node
new_binary
ND_SHR
node
add
tok
tok
next
start
continue
rest
tok
return
node
static
Node
new_add
Node
lhs
Node
rhs
Token
tok
add_type
lhs
add_type
rhs
if
is_numeric
lhs
ty
is_numeric
rhs
ty
return
new_binary
ND_ADD
lhs
rhs
tok
if
lhs
ty
base
rhs
ty
base
error_tok
tok
if
lhs
ty
base
rhs
ty
base
Node
tmp
lhs
lhs
rhs
rhs
tmp
if
lhs
ty
base
kind
TY_VLA
rhs
new_binary
ND_MUL
rhs
new_var_node
lhs
ty
base
vla_size
tok
tok
return
new_binary
ND_ADD
lhs
rhs
tok
rhs
new_binary
ND_MUL
rhs
new_long
lhs
ty
base
size
tok
tok
return
new_binary
ND_ADD
lhs
rhs
tok
static
Node
new_sub
Node
lhs
Node
rhs
Token
tok
add_type
lhs
add_type
rhs
if
is_numeric
lhs
ty
is_numeric
rhs
ty
return
new_binary
ND_SUB
lhs
rhs
tok
if
lhs
ty
base
kind
TY_VLA
rhs
new_binary
ND_MUL
rhs
new_var_node
lhs
ty
base
vla_size
tok
tok
add_type
rhs
Node
node
new_binary
ND_SUB
lhs
rhs
tok
node
ty
lhs
ty
return
node
if
lhs
ty
base
is_integer
rhs
ty
rhs
new_binary
ND_MUL
rhs
new_long
lhs
ty
base
size
tok
tok
add_type
rhs
Node
node
new_binary
ND_SUB
lhs
rhs
tok
node
ty
lhs
ty
return
node
if
lhs
ty
base
rhs
ty
base
Node
node
new_binary
ND_SUB
lhs
rhs
tok
node
ty
ty_long
return
new_binary
ND_DIV
node
new_num
lhs
ty
base
size
tok
tok
error_tok
tok
static
Node
add
Token
rest
Token
tok
Node
node
mul
tok
tok
for
Token
start
tok
if
equal
tok
node
new_add
node
mul
tok
tok
next
start
continue
if
equal
tok
node
new_sub
node
mul
tok
tok
next
start
continue
rest
tok
return
node
static
Node
mul
Token
rest
Token
tok
Node
node
cast
tok
tok
for
Token
start
tok
if
equal
tok
node
new_binary
ND_MUL
node
cast
tok
tok
next
start
continue
if
equal
tok
node
new_binary
ND_DIV
node
cast
tok
tok
next
start
continue
if
equal
tok
node
new_binary
ND_MOD
node
cast
tok
tok
next
start
continue
rest
tok
return
node
static
Node
cast
Token
rest
Token
tok
if
equal
tok
is_typename
tok
next
Token
start
tok
Type
ty
typename
tok
tok
next
tok
skip
tok
if
equal
tok
return
unary
rest
start
Node
node
new_cast
cast
rest
tok
ty
node
tok
start
return
node
return
unary
rest
tok
static
Node
unary
Token
rest
Token
tok
if
equal
tok
return
cast
rest
tok
next
if
equal
tok
return
new_unary
ND_NEG
cast
rest
tok
next
tok
if
equal
tok
Node
lhs
cast
rest
tok
next
add_type
lhs
if
lhs
kind
ND_MEMBER
lhs
member
is_bitfield
error_tok
tok
return
new_unary
ND_ADDR
lhs
tok
if
equal
tok
Node
node
cast
rest
tok
next
add_type
node
if
node
ty
kind
TY_FUNC
return
node
return
new_unary
ND_DEREF
node
tok
if
equal
tok
return
new_unary
ND_NOT
cast
rest
tok
next
tok
if
equal
tok
return
new_unary
ND_BITNOT
cast
rest
tok
next
tok
if
equal
tok
return
to_assign
new_add
unary
rest
tok
next
new_num
tok
tok
if
equal
tok
return
to_assign
new_sub
unary
rest
tok
next
new_num
tok
tok
if
equal
tok
Node
node
new_node
ND_LABEL_VAL
tok
node
label
get_ident
tok
next
node
goto_next
gotos
gotos
node
rest
tok
next
next
return
node
return
postfix
rest
tok
static
void
struct_members
Token
rest
Token
tok
Type
ty
Member
head
Member
cur
head
int
idx
if
a_member
head
NULL
arena_setup
a_member
sizeof
Member
while
equal
tok
VarAttr
attr
Type
basety
declspec
tok
tok
attr
bool
first
true
if
basety
kind
TY_STRUCT
basety
kind
TY_UNION
consume
tok
tok
Member
mem
arena_allocate
a_member
mem
ty
basety
mem
idx
idx
mem
align
attr
align
attr
align
mem
ty
align
cur
cur
next
mem
continue
while
consume
tok
tok
if
first
tok
skip
tok
first
false
Member
mem
arena_allocate
a_member
mem
ty
declarator
tok
tok
basety
mem
name
mem
ty
name
mem
idx
idx
mem
align
attr
align
attr
align
mem
ty
align
if
consume
tok
tok
mem
is_bitfield
true
mem
bit_width
const_expr
tok
tok
cur
cur
next
mem
if
cur
head
cur
ty
kind
TY_ARRAY
cur
ty
array_len
cur
ty
array_of
cur
ty
base
ty
is_flexible
true
rest
tok
next
ty
members
head
next
static
Token
attribute_list
Token
tok
Type
ty
while
consume
tok
tok
tok
skip
tok
tok
skip
tok
bool
first
true
while
consume
tok
tok
if
first
tok
skip
tok
first
false
if
consume
tok
tok
ty
is_packed
true
continue
if
consume
tok
tok
tok
skip
tok
ty
align
const_expr
tok
tok
tok
skip
tok
continue
error_tok
tok
tok
skip
tok
return
tok
static
Type
struct_union_decl
Token
rest
Token
tok
Type
ty
struct_type
tok
attribute_list
tok
ty
Token
tag
NULL
if
tok
kind
TK_IDENT
tag
tok
tok
tok
next
if
tag
equal
tok
rest
tok
Type
ty2
find_tag
tag
if
ty2
return
ty2
ty
size
push_tag_scope
tag
ty
return
ty
tok
skip
tok
struct_members
tok
tok
ty
rest
attribute_list
tok
ty
if
tag
Type
ty2
hashmap_get2
scope
tags
tag
loc
tag
len
if
ty2
ty2
ty
return
ty2
push_tag_scope
tag
ty
return
ty
static
Type
struct_decl
Token
rest
Token
tok
Type
ty
struct_union_decl
rest
tok
ty
kind
TY_STRUCT
if
ty
size
return
ty
int
bits
for
Member
mem
ty
members
mem
mem
mem
next
if
mem
is_bitfield
mem
bit_width
bits
codegen_align_to
bits
mem
ty
size
else
if
mem
is_bitfield
int
sz
mem
ty
size
if
bits
sz
bits
mem
bit_width
sz
bits
codegen_align_to
bits
sz
mem
offset
align_down
bits
sz
mem
bit_offset
bits
sz
bits
mem
bit_width
else
if
ty
is_packed
bits
codegen_align_to
bits
mem
align
mem
offset
bits
bits
mem
ty
size
if
ty
is_packed
ty
align
mem
align
ty
align
mem
align
ty
size
codegen_align_to
bits
ty
align
return
ty
static
Type
union_decl
Token
rest
Token
tok
Type
ty
struct_union_decl
rest
tok
ty
kind
TY_UNION
if
ty
size
return
ty
for
Member
mem
ty
members
mem
mem
mem
next
if
ty
align
mem
align
ty
align
mem
align
if
ty
size
mem
ty
size
ty
size
mem
ty
size
ty
size
codegen_align_to
ty
size
ty
align
return
ty
static
Member
get_struct_member
Type
ty
Token
tok
for
Member
mem
ty
members
mem
mem
mem
next
if
mem
ty
kind
TY_STRUCT
mem
ty
kind
TY_UNION
mem
name
if
get_struct_member
mem
ty
tok
return
mem
continue
if
mem
name
len
tok
len
strncmp
mem
name
loc
tok
loc
tok
len
return
mem
return
NULL
static
Node
struct_ref
Node
node
Token
tok
add_type
node
if
node
ty
kind
TY_STRUCT
node
ty
kind
TY_UNION
error_tok
node
tok
Type
ty
node
ty
for
Member
mem
get_struct_member
ty
tok
if
mem
error_tok
tok
node
new_unary
ND_MEMBER
node
tok
node
member
mem
if
mem
name
break
ty
mem
ty
return
node
static
Node
new_inc_dec
Node
node
Token
tok
int
addend
add_type
node
return
new_cast
new_add
to_assign
new_add
node
new_num
addend
tok
tok
new_num
addend
tok
tok
node
ty
static
Node
postfix
Token
rest
Token
tok
if
equal
tok
is_typename
tok
next
Token
start
tok
Type
ty
typename
tok
tok
next
tok
skip
tok
if
scope
next
NULL
Obj
var
new_anon_gvar
ty
gvar_initializer
rest
tok
var
return
new_var_node
var
start
Obj
var
new_lvar
ty
Node
lhs
lvar_initializer
rest
tok
var
Node
rhs
new_var_node
var
tok
return
new_binary
ND_COMMA
lhs
rhs
start
Node
node
primary
tok
tok
for
if
equal
tok
node
funcall
tok
tok
next
node
continue
if
equal
tok
Token
start
tok
Node
idx
expr
tok
tok
next
tok
skip
tok
node
new_unary
ND_DEREF
new_add
node
idx
start
start
continue
if
equal
tok
node
struct_ref
node
tok
next
tok
tok
next
next
continue
if
equal
tok
node
new_unary
ND_DEREF
node
tok
node
struct_ref
node
tok
next
tok
tok
next
next
continue
if
equal
tok
node
new_inc_dec
node
tok
tok
tok
next
continue
if
equal
tok
node
new_inc_dec
node
tok
tok
tok
next
continue
rest
tok
return
node
static
Node
funcall
Token
rest
Token
tok
Node
fn
add_type
fn
if
fn
ty
kind
TY_FUNC
fn
ty
kind
TY_PTR
fn
ty
base
kind
TY_FUNC
error_tok
fn
tok
Type
ty
fn
ty
kind
TY_FUNC
fn
ty
fn
ty
base
Type
param_ty
ty
params
Node
head
Node
cur
head
while
equal
tok
if
cur
head
tok
skip
tok
Node
arg
assign
tok
tok
add_type
arg
if
param_ty
ty
is_variadic
error_tok
tok
if
param_ty
if
param_ty
kind
TY_STRUCT
param_ty
kind
TY_UNION
arg
new_cast
arg
param_ty
param_ty
param_ty
next
else
if
arg
ty
kind
TY_FLOAT
arg
new_cast
arg
ty_double
cur
cur
next
arg
if
param_ty
error_tok
tok
rest
skip
tok
Node
node
new_unary
ND_FUNCALL
fn
tok
node
func_ty
ty
node
ty
ty
return_ty
node
args
head
next
if
node
ty
kind
TY_STRUCT
node
ty
kind
TY_UNION
node
ret_buffer
new_lvar
node
ty
return
node
static
Node
generic_selection
Token
rest
Token
tok
Token
start
tok
tok
skip
tok
Node
ctrl
assign
tok
tok
add_type
ctrl
Type
t1
ctrl
ty
if
t1
kind
TY_FUNC
t1
pointer_to
t1
else
if
t1
kind
TY_ARRAY
t1
pointer_to
t1
base
Node
ret
NULL
while
consume
rest
tok
tok
skip
tok
if
equal
tok
tok
skip
tok
next
Node
node
assign
tok
tok
if
ret
ret
node
continue
Type
t2
typename
tok
tok
tok
skip
tok
Node
node
assign
tok
tok
if
is_compatible
t1
t2
ret
node
if
ret
error_tok
start
return
ret
static
Node
primary
Token
rest
Token
tok
Token
start
tok
if
equal
tok
equal
tok
next
Node
node
new_node
ND_STMT_EXPR
tok
node
body
compound_stmt
tok
tok
next
next
body
rest
skip
tok
return
node
if
equal
tok
Node
node
expr
tok
tok
next
rest
skip
tok
return
node
if
equal
tok
equal
tok
next
is_typename
tok
next
next
Type
ty
typename
tok
tok
next
next
rest
skip
tok
if
ty
kind
TY_VLA
if
ty
vla_size
return
new_var_node
ty
vla_size
tok
Node
lhs
compute_vla_size
ty
tok
Node
rhs
new_var_node
ty
vla_size
tok
return
new_binary
ND_COMMA
lhs
rhs
tok
return
new_ulong
ty
size
start
if
equal
tok
Node
node
unary
rest
tok
next
add_type
node
if
node
ty
kind
TY_VLA
return
new_var_node
node
ty
vla_size
tok
return
new_ulong
node
ty
size
tok
if
equal
tok
equal
tok
next
is_typename
tok
next
next
Type
ty
typename
tok
tok
next
next
rest
skip
tok
return
new_ulong
ty
align
tok
if
equal
tok
Node
node
unary
rest
tok
next
add_type
node
return
new_ulong
node
ty
align
tok
if
equal
tok
return
generic_selection
rest
tok
next
if
equal
tok
tok
skip
tok
next
Type
t1
typename
tok
tok
tok
skip
tok
Type
t2
typename
tok
tok
rest
skip
tok
return
new_num
is_compatible
t1
t2
start
if
equal
tok
tok
skip
tok
next
Type
ty
typename
tok
tok
rest
skip
tok
if
is_integer
ty
ty
kind
TY_PTR
return
new_num
start
if
is_flonum
ty
return
new_num
start
return
new_num
start
if
equal
tok
Node
node
new_node
ND_CAS
tok
tok
skip
tok
next
node
cas_addr
assign
tok
tok
tok
skip
tok
node
cas_old
assign
tok
tok
tok
skip
tok
node
cas_new
assign
tok
tok
rest
skip
tok
return
node
if
equal
tok
Node
node
new_node
ND_EXCH
tok
tok
skip
tok
next
node
lhs
assign
tok
tok
tok
skip
tok
node
rhs
assign
tok
tok
rest
skip
tok
return
node
if
tok
kind
TK_IDENT
VarScope
sc
find_var
tok
rest
tok
next
if
sc
sc
var
sc
var
is_function
if
current_fn
strarray_push
current_fn
refs
sc
var
name
else
sc
var
is_root
true
if
sc
if
sc
var
return
new_var_node
sc
var
tok
if
sc
enum_ty
return
new_num
sc
enum_val
tok
if
equal
tok
next
error_tok
tok
error_tok
tok
if
tok
kind
TK_STR
Obj
var
new_string_literal
tok
str
tok
ty
rest
tok
next
return
new_var_node
var
tok
if
tok
kind
TK_NUM
Node
node
if
is_flonum
tok
ty
node
new_node
ND_NUM
tok
node
fval
tok
fval
else
node
new_num
tok
val
tok
node
ty
tok
ty
rest
tok
next
return
node
error_tok
tok
static
Token
parse_typedef
Token
tok
Type
basety
bool
first
true
while
consume
tok
tok
if
first
tok
skip
tok
first
false
Type
ty
declarator
tok
tok
basety
if
ty
name
error_tok
ty
name_pos
push_scope
get_ident
ty
name
type_def
ty
return
tok
static
void
create_param_lvars
Type
param
if
param
create_param_lvars
param
next
if
param
name
error_tok
param
name_pos
new_lvar
get_ident
param
name
param
static
void
resolve_goto_labels
void
for
Node
x
gotos
x
x
x
goto_next
for
Node
y
labels
y
y
y
goto_next
if
strcmp
x
label
y
label
x
unique_label
y
unique_label
break
if
x
unique_label
NULL
error_tok
x
tok
next
gotos
labels
NULL
static
Obj
find_func
char
name
Scope
sc
scope
while
sc
next
sc
sc
next
VarScope
sc2
hashmap_get
sc
vars
name
if
sc2
sc2
var
sc2
var
is_function
return
sc2
var
return
NULL
static
void
mark_live
Obj
var
if
var
is_function
var
is_live
return
var
is_live
true
for
int
i
i
var
refs
len
i
Obj
fn
find_func
var
refs
data
i
if
fn
mark_live
fn
static
Token
function
Token
tok
Type
basety
VarAttr
attr
Type
ty
declarator
tok
tok
basety
if
ty
name
error_tok
ty
name_pos
char
name_str
get_ident
ty
name
Obj
fn
find_func
name_str
if
fn
if
fn
is_function
error_tok
tok
if
fn
is_definition
equal
tok
error_tok
tok
name_str
if
fn
is_static
attr
is_static
error_tok
tok
fn
is_definition
fn
is_definition
equal
tok
else
fn
new_gvar
name_str
ty
fn
is_function
true
fn
is_definition
equal
tok
fn
is_static
attr
is_static
attr
is_inline
attr
is_extern
fn
is_inline
attr
is_inline
fn
is_root
fn
is_static
fn
is_inline
if
consume
tok
tok
return
tok
current_fn
fn
locals
NULL
enter_scope
create_param_lvars
ty
params
Type
rty
ty
return_ty
if
rty
kind
TY_STRUCT
rty
kind
TY_UNION
rty
size
new_lvar
pointer_to
rty
fn
params
locals
if
ty
is_variadic
fn
va_area
new_lvar
array_of
ty_char
fn
alloca_bottom
new_lvar
pointer_to
ty_char
tok
skip
tok
push_scope
var
new_string_literal
fn
name
array_of
ty_char
strlen
fn
name
push_scope
var
new_string_literal
fn
name
array_of
ty_char
strlen
fn
name
fn
body
compound_stmt
tok
tok
fn
locals
locals
leave_scope
resolve_goto_labels
return
tok
static
Token
global_variable
Token
tok
Type
basety
VarAttr
attr
bool
first
true
while
consume
tok
tok
if
first
tok
skip
tok
first
false
Type
ty
declarator
tok
tok
basety
if
ty
name
error_tok
ty
name_pos
Obj
var
new_gvar
get_ident
ty
name
ty
var
is_definition
attr
is_extern
var
is_static
attr
is_static
var
is_tls
attr
is_tls
if
attr
align
var
align
attr
align
if
equal
tok
gvar_initializer
tok
tok
next
var
else
if
attr
is_extern
attr
is_tls
var
is_tentative
true
return
tok
static
bool
is_function
Token
tok
if
equal
tok
return
false
Type
dummy
Type
ty
declarator
tok
tok
dummy
return
ty
kind
TY_FUNC
static
void
scan_globals
void
Obj
head
Obj
cur
head
for
Obj
var
globals
var
var
var
next
if
var
is_tentative
cur
cur
next
var
continue
Obj
var2
globals
for
var2
var2
var2
next
if
var
var2
var2
is_definition
strcmp
var
name
var2
name
break
if
var2
cur
cur
next
var
cur
next
NULL
globals
head
next
static
void
declare_builtin_functions
void
Type
ty
func_type
pointer_to
ty_void
ty
params
copy_type
ty_int
builtin_alloca
new_gvar
ty
builtin_alloca
is_definition
false
Obj
parse
Token
tok
declare_builtin_functions
globals
NULL
while
tok
kind
TK_EOF
VarAttr
attr
Type
basety
declspec
tok
tok
attr
if
attr
is_typedef
tok
parse_typedef
tok
basety
continue
if
is_function
tok
tok
function
tok
basety
attr
continue
tok
global_variable
tok
basety
attr
for
Obj
var
globals
var
var
var
next
if
var
is_root
mark_live
var
scan_globals
return
globals
